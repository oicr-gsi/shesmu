{
  "components": {
    "schemas": {
      "ActionFilter": {
        "description": "Action filtering.",
        "discriminator": {
          "mapping": {
            "added": "#/components/schemas/ActionFilterAdded",
            "addedago": "#/components/schemas/ActionFilterAddedAgo",
            "and": "#/components/schemas/ActionFilterAnd",
            "checked": "#/components/schemas/ActionFilterChecked",
            "checkedago": "#/components/schemas/ActionFilterCheckedAgo",
            "created": "#/components/schemas/ActionFilterCreated",
            "createdago": "#/components/schemas/ActionFilterCreatedAgo",
            "external": "#/components/schemas/ActionFilterExternal",
            "externalago": "#/components/schemas/ActionFilterExternalAgo",
            "id": "#/components/schemas/ActionFilterId",
            "or": "#/components/schemas/ActionFilterOr",
            "regex": "#/components/schemas/ActionFilterRegex",
            "sourcefile": "#/components/schemas/ActionFilterSourceFile",
            "sourcelocation": "#/components/schemas/ActionFilterSourceLocation",
            "status": "#/components/schemas/ActionFilterStatus",
            "statuschanged": "#/components/schemas/ActionFilterStatusChanged",
            "statuschangedago": "#/components/schemas/ActionFilterStatusChangedAgo",
            "tag": "#/components/schemas/ActionFilterTag",
            "tag-regex": "#/components/schemas/ActionFilterTagRegex",
            "text": "#/components/schemas/ActionFilterText",
            "type": "#/components/schemas/ActionFilterType"
          },
          "propertyName": "type"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/ActionFilterAdded"
          },
          {
            "$ref": "#/components/schemas/ActionFilterAddedAgo"
          },
          {
            "$ref": "#/components/schemas/ActionFilterAnd"
          },
          {
            "$ref": "#/components/schemas/ActionFilterChecked"
          },
          {
            "$ref": "#/components/schemas/ActionFilterCheckedAgo"
          },
          {
            "$ref": "#/components/schemas/ActionFilterCreated"
          },
          {
            "$ref": "#/components/schemas/ActionFilterCreatedAgo"
          },
          {
            "$ref": "#/components/schemas/ActionFilterExternal"
          },
          {
            "$ref": "#/components/schemas/ActionFilterExternalAgo"
          },
          {
            "$ref": "#/components/schemas/ActionFilterId"
          },
          {
            "$ref": "#/components/schemas/ActionFilterOr"
          },
          {
            "$ref": "#/components/schemas/ActionFilterRegex"
          },
          {
            "$ref": "#/components/schemas/ActionFilterSourceFile"
          },
          {
            "$ref": "#/components/schemas/ActionFilterSourceLocation"
          },
          {
            "$ref": "#/components/schemas/ActionFilterStatus"
          },
          {
            "$ref": "#/components/schemas/ActionFilterStatusChanged"
          },
          {
            "$ref": "#/components/schemas/ActionFilterStatusChangedAgo"
          },
          {
            "$ref": "#/components/schemas/ActionFilterTag"
          },
          {
            "$ref": "#/components/schemas/ActionFilterTagRegex"
          },
          {
            "$ref": "#/components/schemas/ActionFilterText"
          },
          {
            "$ref": "#/components/schemas/ActionFilterType"
          }
        ]
      },
      "ActionFilterAdded": {
        "properties": {
          "end": {
            "description": "milliseconds since UNIX epoch",
            "type": "integer"
          },
          "negate": {
            "description": "if true, the filter's output will be inverted",
            "type": "boolean"
          },
          "start": {
            "description": "milliseconds since UNIX epoch",
            "type": "integer"
          },
          "type": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ActionFilterAddedAgo": {
        "properties": {
          "negate": {
            "description": "if true, the filter's output will be inverted",
            "type": "boolean"
          },
          "offset": {
            "description": "milliseconds since the current time",
            "type": "integer"
          },
          "type": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ActionFilterAnd": {
        "properties": {
          "filters": {
            "description": "the filters which must be all be satisified",
            "items": {
              "$ref": "#/components/schemas/ActionFilter"
            },
            "type": "array"
          },
          "type": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ActionFilterChecked": {
        "properties": {
          "end": {
            "description": "milliseconds since UNIX epoch",
            "type": "integer"
          },
          "negate": {
            "description": "if true, the filter's output will be inverted",
            "type": "boolean"
          },
          "start": {
            "description": "milliseconds since UNIX epoch",
            "type": "integer"
          },
          "type": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ActionFilterCheckedAgo": {
        "properties": {
          "negate": {
            "description": "if true, the filter's output will be inverted",
            "type": "boolean"
          },
          "offset": {
            "description": "milliseconds since the current time",
            "type": "integer"
          },
          "type": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ActionFilterCreated": {
        "properties": {
          "end": {
            "description": "milliseconds since UNIX epoch",
            "type": "integer"
          },
          "negate": {
            "description": "if true, the filter's output will be inverted",
            "type": "boolean"
          },
          "start": {
            "description": "milliseconds since UNIX epoch",
            "type": "integer"
          },
          "type": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ActionFilterCreatedAgo": {
        "properties": {
          "negate": {
            "description": "if true, the filter's output will be inverted",
            "type": "boolean"
          },
          "offset": {
            "description": "milliseconds since the current time",
            "type": "integer"
          },
          "type": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ActionFilterExternal": {
        "properties": {
          "end": {
            "description": "milliseconds since UNIX epoch",
            "type": "integer"
          },
          "negate": {
            "description": "if true, the filter's output will be inverted",
            "type": "boolean"
          },
          "start": {
            "description": "milliseconds since UNIX epoch",
            "type": "integer"
          },
          "type": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ActionFilterExternalAgo": {
        "properties": {
          "negate": {
            "description": "if true, the filter's output will be inverted",
            "type": "boolean"
          },
          "offset": {
            "description": "milliseconds since the current time",
            "type": "integer"
          },
          "type": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ActionFilterId": {
        "properties": {
          "filters": {
            "description": "the action IDs; note that action IDs are unique, but even across restarts",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "negate": {
            "description": "if true, the filter's output will be inverted",
            "type": "boolean"
          },
          "type": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ActionFilterOr": {
        "properties": {
          "filters": {
            "description": "the filters from which at least one must be satisified",
            "items": {
              "$ref": "#/components/schemas/ActionFilter"
            },
            "type": "array"
          },
          "negate": {
            "description": "if true, the filter's output will be inverted",
            "type": "boolean"
          },
          "type": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ActionFilterRegex": {
        "properties": {
          "matchCase": {
            "description": "whether the regular must match as provided or if the case can be different",
            "type": "boolean"
          },
          "negate": {
            "description": "if true, the filter's output will be inverted",
            "type": "boolean"
          },
          "pattern": {
            "description": "a Java regular expression the action must match",
            "type": "regex"
          }
        },
        "type": "object"
      },
      "ActionFilterSourceFile": {
        "properties": {
          "files": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "negate": {
            "description": "if true, the filter's output will be inverted",
            "type": "boolean"
          },
          "type": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ActionFilterSourceLocation": {
        "properties": {
          "locations": {
            "items": {
              "$ref": "#/components/schemas/SourceOliveLocation"
            },
            "type": "array"
          },
          "negate": {
            "description": "if true, the filter's output will be inverted",
            "type": "boolean"
          },
          "type": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ActionFilterStatus": {
        "properties": {
          "negate": {
            "description": "if true, the filter's output will be inverted",
            "type": "boolean"
          },
          "states": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "type": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ActionFilterStatusChanged": {
        "properties": {
          "end": {
            "description": "milliseconds since UNIX epoch",
            "type": "integer"
          },
          "negate": {
            "description": "if true, the filter's output will be inverted",
            "type": "boolean"
          },
          "start": {
            "description": "milliseconds since UNIX epoch",
            "type": "integer"
          },
          "type": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ActionFilterStatusChangedAgo": {
        "properties": {
          "negate": {
            "description": "if true, the filter's output will be inverted",
            "type": "boolean"
          },
          "offset": {
            "description": "milliseconds since the current time",
            "type": "integer"
          },
          "type": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ActionFilterTag": {
        "properties": {
          "negate": {
            "description": "if true, the filter's output will be inverted",
            "type": "boolean"
          },
          "tags": {
            "description": "tags which must appear attached to the action",
            "type": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          }
        },
        "type": "object"
      },
      "ActionFilterTagRegex": {
        "properties": {
          "matchCase": {
            "description": "whether the regular must match as provided or if the case can be different",
            "type": "boolean"
          },
          "negate": {
            "description": "if true, the filter's output will be inverted",
            "type": "boolean"
          },
          "pattern": {
            "description": "a Java regular expression the action's tags must match",
            "type": "regex"
          }
        },
        "type": "object"
      },
      "ActionFilterText": {
        "properties": {
          "matchCase": {
            "description": "whether the text must match as provided or if the case can be different",
            "type": "boolean"
          },
          "negate": {
            "description": "if true, the filter's output will be inverted",
            "type": "boolean"
          },
          "text": {
            "description": "text which must appear in the action",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ActionFilterType": {
        "properties": {
          "negate": {
            "description": "if true, the filter's output will be inverted",
            "type": "boolean"
          },
          "type": {
            "type": "string"
          },
          "types": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "Alert": {
        "properties": {
          "annotations": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          },
          "endsAt": {
            "format": "date-time",
            "type": "string"
          },
          "generatorURL": {
            "format": "uri",
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "labels": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          },
          "startsAt": {
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "AlertFilter": {
        "description": "Alert filtering.",
        "discriminator": {
          "mapping": {
            "and": "#/components/schemas/AlertFilterAnd",
            "eq": "#/components/schemas/AlertFilterLabelValue",
            "has": "#/components/schemas/AlertFilterLabelName",
            "is_live": "#/components/schemas/AlertFilterIsLive",
            "or": "#/components/schemas/AlertFilterOr",
            "sourcelocation": "#/components/schemas/AlertFilterSourceLocation"
          },
          "propertyName": "type"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/AlertFilterAnd"
          },
          {
            "$ref": "#/components/schemas/AlertFilterIsLive"
          },
          {
            "$ref": "#/components/schemas/AlertFilterLabelName"
          },
          {
            "$ref": "#/components/schemas/AlertFilterLabelValue"
          },
          {
            "$ref": "#/components/schemas/AlertFilterOr"
          },
          {
            "$ref": "#/components/schemas/AlertFilterSourceLocation"
          }
        ]
      },
      "AlertFilterAnd": {
        "properties": {
          "filters": {
            "description": "the filters which must be all be satisified",
            "items": {
              "$ref": "#/components/schemas/AlertFilter"
            },
            "type": "array"
          },
          "type": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "AlertFilterIsLive": {
        "properties": {
          "negate": {
            "description": "if true, the filter's output will be inverted",
            "type": "boolean"
          },
          "type": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "AlertFilterLabelName": {
        "properties": {
          "isRegex": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "negate": {
            "description": "if true, the filter's output will be inverted",
            "type": "boolean"
          },
          "type": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "AlertFilterLabelValue": {
        "properties": {
          "isRegex": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "negate": {
            "description": "if true, the filter's output will be inverted",
            "type": "boolean"
          },
          "type": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "AlertFilterOr": {
        "properties": {
          "filters": {
            "description": "the filters from which at least one must be satisified",
            "items": {
              "$ref": "#/components/schemas/AlertFilter"
            },
            "type": "array"
          },
          "negate": {
            "description": "if true, the filter's output will be inverted",
            "type": "boolean"
          },
          "type": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "AlertFilterSourceLocation": {
        "properties": {
          "locations": {
            "items": {
              "$ref": "#/components/schemas/SourceOliveLocation"
            },
            "type": "array"
          },
          "negate": {
            "description": "if true, the filter's output will be inverted",
            "type": "boolean"
          },
          "type": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "AnyValue": {
        "anyOf": [
          {
            "type": "string"
          },
          {
            "type": "number"
          },
          {
            "type": "integer"
          },
          {
            "type": "boolean"
          },
          {
            "items": {},
            "type": "array"
          }
        ],
        "description": "Can be any value - string, number, boolean, array or object."
      },
      "CacheInfo": {
        "description": "Cache information",
        "discriminator": {
          "mapping": {
            "k": "#/components/schemas/CacheInfoKeyValue",
            "kv": "#/components/schemas/CacheInfoValue"
          },
          "propertyName": "type"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/CacheInfoKeyValue"
          },
          {
            "$ref": "#/components/schemas/CacheInfoValue"
          }
        ]
      },
      "CacheInfoKeyValue": {
        "properties": {
          "entries": {
            "additionalProperties": {
              "properties": {
                "collectionSize": {
                  "description": "the number of items in this cache",
                  "type": "integer"
                },
                "lastUpdate": {
                  "description": "milliseconds since UNIX epoch",
                  "type": "integer"
                }
              },
              "type": "object"
            },
            "description": "the items stored in this cache",
            "type": "object"
          },
          "name": {
            "description": "the name of the cache",
            "type": "string"
          },
          "ttl": {
            "description": "the number of minutes before the cache is refreshed",
            "type": "integer"
          },
          "type": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "CacheInfoValue": {
        "properties": {
          "collectionSize": {
            "description": "the number of items in this cache",
            "type": "integer"
          },
          "lastUpdate": {
            "description": "milliseconds since UNIX epoch",
            "type": "integer"
          },
          "name": {
            "description": "the name of the cache",
            "type": "string"
          },
          "ttl": {
            "description": "the number of minutes before the cache is refreshed",
            "type": "integer"
          },
          "type": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "Command": {
        "properties": {
          "buttonText": {
            "description": "the text that should be displayed to the user for this command",
            "type": "string"
          },
          "command": {
            "description": "the command's identifier",
            "type": "string"
          },
          "count": {
            "description": "the number of actions that will be affected (for bulk commands only)",
            "type": "boolean"
          },
          "showPrompt": {
            "description": "the user should get a confirmation prompt before doing this",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "SimulationResponse": {
        "properties": {
          "actions": {
            "items": {
              "additionalProperties": true,
              "properties": {
                "type": {
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "alerts": {
            "properties": {
              "annotations": {
                "additionalProperties": {
                  "type": "string"
                },
                "type": "object"
              },
              "labels": {
                "additionalProperties": {
                  "type": "string"
                },
                "type": "object"
              }
            },
            "type": "object"
          },
          "bytecode": {
            "type": "string"
          },
          "dumpers": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "errors": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "exports": {
            "additionalProperties": {
              "properties": {
                "parameters": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "returns": {
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "object"
          },
          "metrics": {
            "type": "string"
          },
          "olives": {
            "items": {
              "properties": {
                "column": {
                  "type": "integer"
                },
                "description": {
                  "type": "string"
                },
                "diagram": {
                  "type": "string"
                },
                "duration": {
                  "type": "integer"
                },
                "line": {
                  "type": "integer"
                },
                "syntax": {
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "overloadedInputs": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "SourceOliveLocation": {
        "properties": {
          "column": {
            "type": "integer"
          },
          "file": {
            "type": "string"
          },
          "hash": {
            "type": "string"
          },
          "line": {
            "type": "integer"
          }
        },
        "type": "object"
      }
    }
  },
  "info": {
    "contact": {
      "email": "andre.masella@oicr.on.ca"
    },
    "description": "This API is implemented by [Shesmu](https://github.com/oicr-gsi/shesmu).",
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    },
    "title": "Shesmu Server",
    "version": "1.0.0"
  },
  "openapi": "3.0.0",
  "paths": {
    "/actions": {
      "get": {
        "description": "",
        "operationId": "getActionCatalog",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "description": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      },
                      "parameters": {
                        "items": {
                          "properties": {
                            "name": {
                              "type": "string"
                            },
                            "required": {
                              "type": "boolean"
                            },
                            "type": {
                              "format": "typedescriptor",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Action catalog transmitted"
          }
        },
        "summary": "Get a list of actions that can be performed by this server.",
        "tags": [
          "actions"
        ]
      }
    },
    "/allalerts": {
      "get": {
        "description": "",
        "operationId": "getAllAlerts",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Alert"
                  },
                  "type": "array"
                }
              }
            },
            "description": "All alerts produced by this instance"
          }
        },
        "summary": "Get a list of current firing alerts.",
        "tags": [
          "alerts"
        ]
      }
    },
    "/caches": {
      "get": {
        "description": "",
        "operationId": "getCacheInfo",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/CacheInfo"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Get information on all caches in all plugins"
          }
        },
        "summary": "Get a list of caches that are in use on this server.",
        "tags": [
          "caches"
        ]
      }
    },
    "/command": {
      "post": {
        "description": "",
        "operationId": "sendCommandToActions",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "command": {
                    "type": "string"
                  },
                  "filters": {
                    "items": {
                      "$ref": "#/components/schemas/ActionFilter"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "Sends a command to the actions that match the supplied filters.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer"
                }
              }
            },
            "description": "The number of actions that enacted the command"
          }
        },
        "summary": "Send commands to actions",
        "tags": [
          "actions"
        ]
      }
    },
    "/constant": {
      "post": {
        "description": "",
        "operationId": "getConstant",
        "requestBody": {
          "content": {
            "text/plain": {
              "schema": {
                "type": "string"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "value": {
                      "$ref": "#/components/schemas/AnyValue"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "The current value of the constant or an error"
          }
        },
        "summary": "Get the value of a constant",
        "tags": [
          "constants"
        ]
      }
    },
    "/constants": {
      "get": {
        "description": "",
        "operationId": "getConstantsCatalog",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "description": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      },
                      "type": {
                        "format": "typedescriptor",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Constants catalog transmitted"
          }
        },
        "summary": "Get a list of constants that can be use in olives on this server.",
        "tags": [
          "constants"
        ]
      }
    },
    "/count": {
      "post": {
        "description": "",
        "operationId": "countActions",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/ActionFilter"
                },
                "type": "array"
              }
            }
          },
          "description": "Counts the number of actions matching the query.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer"
                }
              }
            },
            "description": "The number of actions matched"
          }
        },
        "summary": "Count actions generated by olives",
        "tags": [
          "actions"
        ]
      }
    },
    "/currentalerts": {
      "get": {
        "description": "",
        "operationId": "getCurrentAlerts",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Alert"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Current active alerts"
          }
        },
        "summary": "Get a list of current firing alerts.",
        "tags": [
          "alerts"
        ]
      }
    },
    "/drain": {
      "post": {
        "description": "",
        "operationId": "drainActions",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/ActionFilter"
                },
                "type": "array"
              }
            }
          },
          "description": "Removes actions from the actions generated by olives just like purging, but also returns these actions as if queried.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "additionalProperties": true,
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            },
            "description": "The number of actions purged"
          }
        },
        "summary": "Remove actions generated by olives",
        "tags": [
          "actions"
        ]
      }
    },
    "/function": {
      "post": {
        "description": "",
        "operationId": "runFunction",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "args": {
                    "items": {
                      "$ref": "#/components/schemas/AnyValue"
                    },
                    "type": "array"
                  },
                  "name": {
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "value": {
                      "$ref": "#/components/schemas/AnyValue"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "The current value of the constant or an error"
          }
        },
        "summary": "Compute value of function",
        "tags": [
          "functions"
        ]
      }
    },
    "/functions": {
      "get": {
        "description": "",
        "operationId": "getFunctionsCatalog",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "description": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      },
                      "return": {
                        "format": "typedescriptor",
                        "type": "string"
                      },
                      "types": {
                        "items": {
                          "properties": {
                            "description": {
                              "type": "string"
                            },
                            "type": {
                              "format": "typedescriptor",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Functions catalog transmitted"
          }
        },
        "summary": "Get a list of functions that can be use in olives on this server.",
        "tags": [
          "functions"
        ]
      }
    },
    "/getalert": {
      "post": {
        "description": "",
        "operationId": "getAlert",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Alert"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "value": {
                      "$ref": "#/components/schemas/AnyValue"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "The current value of the constant or an error"
          }
        },
        "summary": "Get the value of a constant",
        "tags": [
          "constants"
        ]
      }
    },
    "/input/{format}": {
      "get": {
        "description": "",
        "operationId": "getInputCatalog",
        "parameters": [
          {
            "description": "The name of the input format",
            "in": "path",
            "name": "format",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Input data catalog transmitted"
          }
        },
        "summary": "Get a list of olive input data known by this server.",
        "tags": [
          "inputdata"
        ]
      }
    },
    "/input/{format}/stale": {
      "get": {
        "description": "",
        "operationId": "getStaleInputCatalog",
        "parameters": [
          {
            "description": "The name of the input format",
            "in": "path",
            "name": "format",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Input data catalog transmitted"
          }
        },
        "summary": "Get a list of olive input data known by this server but do not attempt to refresh it.",
        "tags": [
          "inputdata"
        ]
      }
    },
    "/invalidate": {
      "post": {
        "description": "Invalidates caches; DO NOT USE IN PRODUCTION",
        "operationId": "invalidateCaches",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Caches were invalidated"
          }
        },
        "summary": "Invalidate caches; DEBUGGING ONLY",
        "tags": [
          "caches"
        ]
      }
    },
    "/jsondumper": {
      "delete": {
        "description": "",
        "operationId": "jsonDumperDelete",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            },
            "description": "Remove this dumper from the list and discard any data. Returns true if the dumper previously existed."
          }
        },
        "summary": "Delete dumper",
        "tags": [
          "misc"
        ]
      },
      "post": {
        "description": "",
        "operationId": "jsonDumperDump",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "items": {
                      "$ref": "#/components/schemas/AnyValue"
                    },
                    "type": "array"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Copy the data last pushed into this dumper by an olive; if the dumper does not exist, an empty array is returned."
          }
        },
        "summary": "Download dumped data",
        "tags": [
          "misc"
        ]
      },
      "put": {
        "description": "",
        "operationId": "jsonDumperCreate",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Create a new dumper with the provided name. If one already exists, this operation does nothing."
          }
        },
        "summary": "Create dumper",
        "tags": [
          "misc"
        ]
      }
    },
    "/parsefiltertext": {
      "post": {
        "description": "",
        "operationId": "parseFilterText",
        "requestBody": {
          "content": {
            "application/json": {
              "type": "string"
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActionFilter"
                }
              }
            },
            "description": "The filters that were parsed from the text"
          },
          "400": {
            "description": "No filters were found in the text"
          }
        },
        "summary": "Extract ASCII-encoded filters from text",
        "tags": [
          "misc"
        ]
      }
    },
    "/parsequery": {
      "post": {
        "description": "",
        "operationId": "parseActionQuery",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          },
          "description": "Parses a human-friendly-ish text query into an action filter",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "errors": {
                      "items": {
                        "properties": {
                          "column": {
                            "type": "integer"
                          },
                          "line": {
                            "type": "integer"
                          },
                          "message": {
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "filter": {
                      "$ref": "#/components/schemas/ActionFilter"
                    },
                    "formatted": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "A filter equivalent to the query or a collection of parse errors"
          }
        },
        "summary": "Create a filter JSON from a text query",
        "tags": [
          "actions"
        ]
      }
    },
    "/pausefile": {
      "post": {
        "description": "",
        "operationId": "pauseOlive",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "file": {
                    "type": "string"
                  },
                  "pause": {
                    "nullable": true,
                    "type": "boolean"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "Stops any actions from olive in a file from running. This does not stop the olives from running and has no affect on Alert or Refill olives. If the pause state provided is null, this queries the current state only.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            },
            "description": "Whether the file is currently paused"
          }
        },
        "summary": "Throttle a file's actions.",
        "tags": [
          "misc"
        ]
      }
    },
    "/pauseolive": {
      "post": {
        "description": "",
        "operationId": "pauseOlive",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "column": {
                    "type": "int"
                  },
                  "file": {
                    "type": "string"
                  },
                  "hash": {
                    "type": "string"
                  },
                  "line": {
                    "type": "int"
                  },
                  "pause": {
                    "nullable": true,
                    "type": "boolean"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "Stops an olive's actions from running. This does not stop the olive from running and has no affect on Alert or Refill olives. If the pause state provided is null, this queries the current state only.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            },
            "description": "Whether the olive is currently paused"
          }
        },
        "summary": "Throttle an olive's actions.",
        "tags": [
          "misc"
        ]
      }
    },
    "/printquery": {
      "post": {
        "description": "",
        "operationId": "printActionQuery",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ActionFilter"
              }
            }
          },
          "description": "Converts an action filter into a human-friendly-ish query string",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "A query equivalent to the filter"
          }
        },
        "summary": "Create text query from a filter",
        "tags": [
          "actions"
        ]
      }
    },
    "/purge": {
      "post": {
        "description": "",
        "operationId": "purgeActions",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/ActionFilter"
                },
                "type": "array"
              }
            }
          },
          "description": "Removes actions from the actions generated by olives. These may reappear if an olive regenerates the same action. This is mostly used to clear failed actions that are no longer in the input data.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer"
                }
              }
            },
            "description": "The number of actions purged"
          }
        },
        "summary": "Remove actions generated by olives",
        "tags": [
          "actions"
        ]
      }
    },
    "/query": {
      "post": {
        "description": "",
        "operationId": "queryActions",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "filters": {
                    "items": {
                      "$ref": "#/components/schemas/ActionFilter"
                    },
                    "type": "array"
                  },
                  "limit": {
                    "type": "integer"
                  },
                  "skip": {
                    "type": "integer"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "Causes an action to be launched. The status code indicates whether the job has successfully finished running. If completed successfully, an optional URL may be provided where the result may be viewed.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "bulkCommands": {
                      "items": {
                        "$ref": "#/components/schemas/Command"
                      },
                      "type": "array"
                    },
                    "results": {
                      "items": {
                        "additionalProperties": true,
                        "properties": {
                          "commands": {
                            "items": {
                              "$ref": "#/components/schemas/Command"
                            },
                            "type": "array"
                          },
                          "type": {
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "total": {
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "A list of actions that match the supplied filters"
          }
        },
        "summary": "Get actions generated by olives",
        "tags": [
          "actions"
        ]
      }
    },
    "/queryalerts": {
      "post": {
        "description": "",
        "operationId": "queryAlerts",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AlertFilter"
              }
            }
          },
          "description": "Causes an action to be launched. The status code indicates whether the job has successfully finished running. If completed successfully, an optional URL may be provided where the result may be viewed.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Alert"
                  },
                  "type": "array"
                }
              }
            },
            "description": "All alerts produced by this instance"
          }
        },
        "summary": "Get a list of current firing alerts.",
        "tags": [
          "alerts"
        ]
      }
    },
    "/simulate": {
      "post": {
        "description": "Simulate Olive",
        "operationId": "simulate",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "allowUnused": {
                    "type": "boolean"
                  },
                  "dryRun": {
                    "type": "boolean"
                  },
                  "fakeActions": {
                    "additionalProperties": {
                      "additionalProperties": {
                        "properties": {
                          "required": {
                            "type": "boolean"
                          },
                          "type": {
                            "anyOf": [
                              {
                                "type": "string"
                              },
                              {
                                "additionalProperties": {
                                  "type": "string"
                                },
                                "type": "object"
                              }
                            ]
                          }
                        },
                        "type": "object"
                      },
                      "type": "object"
                    },
                    "type": "object"
                  },
                  "fakeConstants": {
                    "additionalProperties": {
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "value": {
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "type": "object"
                  },
                  "fakeRefillers": {
                    "additionalProperties": {
                      "additionalProperties": {
                        "type": "string"
                      },
                      "type": "object"
                    },
                    "type": "object"
                  },
                  "readStale": {
                    "type": "boolean"
                  },
                  "script": {
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SimulationResponse"
                }
              },
              "description": "Results from the compilation and running."
            },
            "description": "Simulation complete. Does not indicate that olive ran successfully."
          }
        },
        "summary": "Performs a dry-run of an olive script and returns all the alerts and actions generated by the script.",
        "tags": [
          "misc"
        ]
      }
    },
    "/simulate-existing": {
      "post": {
        "description": "Simulate an olive already on the server",
        "operationId": "simulateExisting",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "fakeConstants": {
                    "additionalProperties": {
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "value": {
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "type": "object"
                  },
                  "fileName": {
                    "type": "string"
                  },
                  "readStale": {
                    "type": "boolean"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SimulationResponse"
                }
              },
              "description": "Results from the compilation and running."
            },
            "description": "Simulation complete. Does not indicate that olive ran successfully."
          }
        },
        "summary": "Performs a dry-run of an olive script and returns all the alerts and actions generated by the script.",
        "tags": [
          "misc"
        ]
      }
    },
    "/type": {
      "post": {
        "description": "",
        "operationId": "prettyType",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "The human readable type"
          },
          "400": {
            "description": "The type descriptor provided is not valid."
          }
        },
        "summary": "Parse a Shesmu type",
        "tags": [
          "misc"
        ]
      }
    },
    "/variables": {
      "get": {
        "description": "",
        "operationId": "getVariablesCatalog",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": {
                    "properties": {
                      "gangs": {
                        "additionalProperties": {
                          "items": {
                            "properties": {
                              "dropIfDefault": {
                                "type": "boolean"
                              },
                              "name": {
                                "type": "string"
                              },
                              "type": {
                                "format": "typedescriptor",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "type": "object"
                      },
                      "variables": {
                        "additionalProperties": {
                          "format": "typedescriptor",
                          "type": "string"
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  },
                  "type": "object"
                }
              }
            },
            "description": "Variables catalog transmitted"
          }
        },
        "summary": "Get the variables that can be use in olives on this server.",
        "tags": [
          "inputdata"
        ]
      }
    }
  },
  "tags": [
    {
      "description": "Actions",
      "name": "actions"
    },
    {
      "description": "Alerts",
      "name": "alerts"
    },
    {
      "description": "Caches",
      "name": "caches"
    },
    {
      "description": "Constants/Predefined Values",
      "name": "constants"
    },
    {
      "description": "Functions",
      "name": "functions"
    },
    {
      "description": "Olive Input Data",
      "name": "inputdata"
    },
    {
      "description": "Miscellaneous",
      "name": "misc"
    }
  ]
}
