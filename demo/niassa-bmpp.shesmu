Version 1;
Input cerberus_fp;
Import fake::demo::niassa::gsi::*;

Define select()
  Where
    library_design In ["EX", "TS", "WG"]
    && !(instrument_model In ["Illumina MiSeq"]);

Function get_bmpp_files(string reference)
  Switch reference
    When "hg19" Then
      `{
        known_indels = ["/srv/reference/hg19-dbsnp-leftaligned-138/dbsnp_138.hg19.leftAligned.vcf.gz"],
        known_alleles = ["/srv/reference/hg19-dbsnp-leftaligned-138/dbsnp_138.hg19.leftAligned.vcf.gz"],
        known_sites = ["/srv/reference/hg19-dbsnp-leftaligned-138/dbsnp_138.hg19.leftAligned.vcf.gz"]
      }`
    When "hg38" Then
      `{
        known_indels = ["/srv/reference/hg38-dbsnp-138/dbsnp_138.hg38.vcf.gz"],
        known_alleles = ["/srv/reference/hg38-dbsnp-138/dbsnp_138.hg38.vcf.gz"],
        known_sites = ["/srv/reference/hg38-dbsnp-138/dbsnp_138.hg38.vcf.gz"]
      }`
    Else
    ``;

Olive
  Description "bamMergePreprocessing grouped by donor"
  Tag niassa
  Tag research
  Tag bmpp

  select()
  Where workflow In ["BwaMem", "bwaMem"]

  Group By workflow_run_accession, ius, reference = olive::common::extract_reference(workflow_run_attributes)
  Into
    timestamp = Max timestamp,
    merged_library_name = Univalued "{@merged_library}",
    merged_library_tuple = Univalued {@merged_library},
    bamAndBamIndex = {
        bam = Where metatype == "application/bam" Univalued path,
        bamIndex = Where metatype == "application/bam-index" Univalued path
      },
    bamInput = Where metatype == "application/bam" Univalued {accession = accession, lims = lims, signature = std::signature::sha1, stale = stale},
    bamIndexInput = Where metatype == "application/bam-index" Univalued {accession = accession, lims = lims, signature = std::signature::sha1, stale = stale},
    library_design = Univalued library_design,
    targeted_resequencing = Univalued targeted_resequencing,
    picard_optical_duplicate_pixel_distance = Univalued olive::common::get_optical_distance(instrument_model),
    instrument_model = Univalued instrument_model,
    project = Univalued project,
    donor = Univalued donor
  Pick Max timestamp By ius, reference
  Dump All To bam_dump

  Require reference_info = `olive::common::get_reference_interval_info(reference?, library_design, targeted_resequencing)`
    OnReject
      Alert
        alertname = "NoReference",
        severity = "pipeline",
        environment = config::misc::environment,
        workflow = "bamMergePreprocessing",
        reference = reference Default "Unknown",
        project = project
      For 30mins
    Resume
  Require bmpp_data = `get_bmpp_files(reference?)`
    OnReject
      Alert
        alertname = "NoReference",
        severity = "pipeline",
        environment = config::misc::environment,
        workflow = "bamMergePreprocessing",
        reference = reference Default "Unknown",
        project = project
      For 30mins
    Resume

  # group bams by merged library
  Group By instrument_model, project, donor, library_design, merged_library_tuple, merged_library_name, reference, targeted_resequencing
  Into
    bamAndBamIndexes = List bamAndBamIndex,
    reference_file = Univalued reference_info.reference_file,
    known_indels = Univalued bmpp_data.known_indels,
    known_alleles = Univalued bmpp_data.known_alleles,
    known_sites = Univalued bmpp_data.known_sites,
    intervals_to_parallelize_by = Univalued reference_info.chromosomes,
   inputs = Flatten [bamInput, bamIndexInput],
    iuses = List ius,
    picard_optical_duplicate_pixel_distance = Univalued picard_optical_duplicate_pixel_distance

  Let
    instrument_model,
    project,
    donor,
    reference = OnlyIf reference,
    targeted_resequencing,
    library_design,
    reference_file,
    known_indels,
    known_alleles,
    known_sites,
    intervals_to_parallelize_by,
    picard_optical_duplicate_pixel_distance,
    merged_library_data = {
      outputIdentifier = merged_library_name,
      bamAndBamIndexInputs = bamAndBamIndexes
    },
    inputs = inputs,
    not_ready = `(redict::merging_ready_checker::get[{instrument_model, merged_library_tuple}]?) - iuses` Default [],
    output_group = {
      outputIdentifier = merged_library_name,
      bam = {
        files = For i In inputs: List {i.accession, i.stale},
        lims_keys = For i In inputs: List {...i.lims, signature=i.signature},
        metatype = ``,
        attributes = []
      },
      bamIndex = {
        files = For i In inputs: List {i.accession, i.stale},
        lims_keys = For i In inputs: List {...i.lims, signature=i.signature},
        metatype = ``,
        attributes = []
      }
    }
  Dump All To merged_libary_dump

  # group merged library bams by donor (for cocleaning)
  Group By instrument_model, project, donor, reference, targeted_resequencing, library_design
  Into
    inputs = Flatten inputs,
    input_groups = List merged_library_data,
    output_groups = List output_group,
    reference_file = Univalued reference_file,
    known_indels = Univalued known_indels,
    known_alleles = Univalued known_alleles,
    known_sites = Univalued known_sites,
    intervals_to_parallelize_by = Univalued intervals_to_parallelize_by,
    picard_optical_duplicate_pixel_distance = Univalued picard_optical_duplicate_pixel_distance,
    not_ready = Flatten not_ready
  Dump All To donor_merged_library_dump
  Reject (For _ In not_ready: Count) > 0
    OnReject
      Dump project, donor, library_design, targeted_resequencing, instrument_model, not_ready To merging_not_ready_research
    Resume
  Run bam_merge_preprocessing_2_0
  Tag "reference:{reference}"
  Tag "project:{project}"
  Tag "merged_library_count:{For i In input_groups: Count}"
  Tag "library_design:{library_design}"
  Tag "instrument_model:{instrument_model}"
  Tag "targeted_resequencing:{targeted_resequencing}"
  With
    wdl_inputs = {
      bamMergePreprocessing = {
        inputGroups = input_groups,
        intervalsToParallelizeByString = intervals_to_parallelize_by,
        reference = reference_file,
        doFilter = `True`,
        doMarkDuplicates = `True`,
        doSplitNCigarReads = `False`, # TODO: WT/MR == True
        doIndelRealignment = `True`,
        doBqsr = `True`,
        preprocessBam = {
          filterFlags = `256`,
          minMapQuality = ``,
          opticalDuplicatePixelDistance = `picard_optical_duplicate_pixel_distance`,
          temporaryWorkingDir = `"$TMP"`,
          markDuplicatesAdditionalParams = `"--TMP_DIR=$TMP"`, # use local disk for tmp
          overhead = ``,
          jobMemory = `42`, #42-6=36G xmx
          modules = ``,
          timeout = `48`
        },
        realignerTargetCreator = {
          knownIndels = known_indels,
          downsamplingType = If library_design == "TS" Then `"NONE"` Else ``,
          jobMemory = `24`,
          modules = ``,
          timeout = `48`
        },
        indelRealign = {
          knownAlleles = known_alleles,
          jobMemory = `24`,
          modules = ``,
          timeout = `48`
        },
        analyzeCovariates = {
          jobMemory = `24`,
          modules = ``,
          timeout = `24`
        },
        baseQualityScoreRecalibration = {
          knownSites = known_sites,
          jobMemory = `24`,
          modules = ``,
          timeout = `24`
        },
        applyBaseQualityScoreRecalibration = {
          jobMemory = `24`,
          modules = ``,
          timeout = `24`
        },
        gatherBQSRReports = {
          jobMemory = `24`,
          modules = ``,
          timeout = `24`
        },
        mergeSplitByIntervalBams = {
          jobMemory = `24`,
          modules = ``,
          timeout = `24`
        }
      }
    },
    wdl_outputs = {
      bamMergePreprocessing = {
        outputGroups = output_groups,
        recalibrationReport = {
          files = For i In inputs: List {i.accession, i.stale},
          lims_keys = For i In inputs: List {...i.lims, signature=i.signature},
          metatype = ``,
          attributes = []
        },
        recalibrationTable = {
          files = For i In inputs: List {i.accession, i.stale},
          lims_keys = For i In inputs: List {...i.lims, signature=i.signature},
          metatype = ``,
          attributes = []
        }
      }
    },
    wdl_options = {
      final_workflow_log_dir = config::misc::final_workflow_log_dir,
      final_call_logs_dir = config::misc::final_call_logs_dir
    },
    reference = reference,
    cromwell_host = config::misc::cromwell_host,
    output_prefix = table::output_for_project::get(project),
    major_olive_version = 0;
