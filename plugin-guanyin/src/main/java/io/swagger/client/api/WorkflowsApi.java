/*
 * Cromwell Server REST API
 * Describes the REST API provided by a Cromwell server
 *
 * OpenAPI spec version: 30
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import com.google.gson.reflect.TypeToken;
import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;
import io.swagger.client.model.BackendResponse;
import io.swagger.client.model.LabelsResponse;
import io.swagger.client.model.WorkflowIdAndStatus;
import io.swagger.client.model.WorkflowMetadataResponse;
import io.swagger.client.model.WorkflowQueryParameter;
import io.swagger.client.model.WorkflowQueryResponse;
import java.io.File;
import java.io.IOException;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.threeten.bp.OffsetDateTime;

public class WorkflowsApi {
  private ApiClient apiClient;

  public WorkflowsApi() {
    this(Configuration.getDefaultApiClient());
  }

  public WorkflowsApi(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  public ApiClient getApiClient() {
    return apiClient;
  }

  public void setApiClient(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  /**
   * Build call for abort
   *
   * @param version Cromwell API Version (required)
   * @param id A workflow ID (required)
   * @param progressListener Progress listener
   * @param progressRequestListener Progress request listener
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   */
  public com.squareup.okhttp.Call abortCall(
      String version,
      String id,
      final ProgressResponseBody.ProgressListener progressListener,
      final ProgressRequestBody.ProgressRequestListener progressRequestListener)
      throws ApiException {
    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath =
        "/api/workflows/{version}/{id}/abort"
            .replaceAll("\\{" + "version" + "\\}", apiClient.escapeString(version.toString()))
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {};

    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient
          .getHttpClient()
          .networkInterceptors()
          .add(
              new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(
                    com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                  com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                  return originalResponse
                      .newBuilder()
                      .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                      .build();
                }
              });
    }

    String[] localVarAuthNames = new String[] {};
    return apiClient.buildCall(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarFormParams,
        localVarAuthNames,
        progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private com.squareup.okhttp.Call abortValidateBeforeCall(
      String version,
      String id,
      final ProgressResponseBody.ProgressListener progressListener,
      final ProgressRequestBody.ProgressRequestListener progressRequestListener)
      throws ApiException {

    // verify the required parameter 'version' is set
    if (version == null) {
      throw new ApiException("Missing the required parameter 'version' when calling abort(Async)");
    }

    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException("Missing the required parameter 'id' when calling abort(Async)");
    }

    com.squareup.okhttp.Call call =
        abortCall(version, id, progressListener, progressRequestListener);
    return call;
  }

  /**
   * Abort a running workflow Request Cromwell to abort a running workflow. For instance this might
   * be necessary in cases where you have submitted a workflow with incorrect inputs or no longer
   * need the results. Cromwell will make a best effort attempt to immediately halt any currently
   * running jobs from this workflow.
   *
   * @param version Cromwell API Version (required)
   * @param id A workflow ID (required)
   * @return WorkflowIdAndStatus
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *     response body
   */
  public WorkflowIdAndStatus abort(String version, String id) throws ApiException {
    ApiResponse<WorkflowIdAndStatus> resp = abortWithHttpInfo(version, id);
    return resp.getData();
  }

  /**
   * Abort a running workflow Request Cromwell to abort a running workflow. For instance this might
   * be necessary in cases where you have submitted a workflow with incorrect inputs or no longer
   * need the results. Cromwell will make a best effort attempt to immediately halt any currently
   * running jobs from this workflow.
   *
   * @param version Cromwell API Version (required)
   * @param id A workflow ID (required)
   * @return ApiResponse&lt;WorkflowIdAndStatus&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *     response body
   */
  public ApiResponse<WorkflowIdAndStatus> abortWithHttpInfo(String version, String id)
      throws ApiException {
    com.squareup.okhttp.Call call = abortValidateBeforeCall(version, id, null, null);
    Type localVarReturnType = new TypeToken<WorkflowIdAndStatus>() {}.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Abort a running workflow (asynchronously) Request Cromwell to abort a running workflow. For
   * instance this might be necessary in cases where you have submitted a workflow with incorrect
   * inputs or no longer need the results. Cromwell will make a best effort attempt to immediately
   * halt any currently running jobs from this workflow.
   *
   * @param version Cromwell API Version (required)
   * @param id A workflow ID (required)
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call abortAsync(
      String version, String id, final ApiCallback<WorkflowIdAndStatus> callback)
      throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener =
          new ProgressResponseBody.ProgressListener() {
            @Override
            public void update(long bytesRead, long contentLength, boolean done) {
              callback.onDownloadProgress(bytesRead, contentLength, done);
            }
          };

      progressRequestListener =
          new ProgressRequestBody.ProgressRequestListener() {
            @Override
            public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
              callback.onUploadProgress(bytesWritten, contentLength, done);
            }
          };
    }

    com.squareup.okhttp.Call call =
        abortValidateBeforeCall(version, id, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<WorkflowIdAndStatus>() {}.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }
  /**
   * Build call for backends
   *
   * @param version Cromwell API Version (required)
   * @param progressListener Progress listener
   * @param progressRequestListener Progress request listener
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   */
  public com.squareup.okhttp.Call backendsCall(
      String version,
      final ProgressResponseBody.ProgressListener progressListener,
      final ProgressRequestBody.ProgressRequestListener progressRequestListener)
      throws ApiException {
    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath =
        "/api/workflows/{version}/backends"
            .replaceAll("\\{" + "version" + "\\}", apiClient.escapeString(version.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {};

    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient
          .getHttpClient()
          .networkInterceptors()
          .add(
              new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(
                    com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                  com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                  return originalResponse
                      .newBuilder()
                      .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                      .build();
                }
              });
    }

    String[] localVarAuthNames = new String[] {};
    return apiClient.buildCall(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarFormParams,
        localVarAuthNames,
        progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private com.squareup.okhttp.Call backendsValidateBeforeCall(
      String version,
      final ProgressResponseBody.ProgressListener progressListener,
      final ProgressRequestBody.ProgressRequestListener progressRequestListener)
      throws ApiException {

    // verify the required parameter 'version' is set
    if (version == null) {
      throw new ApiException(
          "Missing the required parameter 'version' when calling backends(Async)");
    }

    com.squareup.okhttp.Call call =
        backendsCall(version, progressListener, progressRequestListener);
    return call;
  }

  /**
   * List the supported backends Returns the backends supported by this Cromwell server, as well as
   * the default backend.
   *
   * @param version Cromwell API Version (required)
   * @return BackendResponse
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *     response body
   */
  public BackendResponse backends(String version) throws ApiException {
    ApiResponse<BackendResponse> resp = backendsWithHttpInfo(version);
    return resp.getData();
  }

  /**
   * List the supported backends Returns the backends supported by this Cromwell server, as well as
   * the default backend.
   *
   * @param version Cromwell API Version (required)
   * @return ApiResponse&lt;BackendResponse&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *     response body
   */
  public ApiResponse<BackendResponse> backendsWithHttpInfo(String version) throws ApiException {
    com.squareup.okhttp.Call call = backendsValidateBeforeCall(version, null, null);
    Type localVarReturnType = new TypeToken<BackendResponse>() {}.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * List the supported backends (asynchronously) Returns the backends supported by this Cromwell
   * server, as well as the default backend.
   *
   * @param version Cromwell API Version (required)
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call backendsAsync(
      String version, final ApiCallback<BackendResponse> callback) throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener =
          new ProgressResponseBody.ProgressListener() {
            @Override
            public void update(long bytesRead, long contentLength, boolean done) {
              callback.onDownloadProgress(bytesRead, contentLength, done);
            }
          };

      progressRequestListener =
          new ProgressRequestBody.ProgressRequestListener() {
            @Override
            public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
              callback.onUploadProgress(bytesWritten, contentLength, done);
            }
          };
    }

    com.squareup.okhttp.Call call =
        backendsValidateBeforeCall(version, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<BackendResponse>() {}.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }
  /**
   * Build call for callCacheDiff
   *
   * @param version Cromwell API Version (required)
   * @param workflowA Workflow Id of the first workflow (required)
   * @param callA Fully qualified name, including workflow name, of the first call. (required)
   * @param workflowB Workflow Id of the second workflow (required)
   * @param callB Fully qualified name, including workflow name, of the second call (required)
   * @param indexA Shard index for the first call for cases where the requested call was part of a
   *     scatter. (optional)
   * @param indexB Shard index for the second call for cases where the requested call was part of a
   *     scatter. (optional)
   * @param progressListener Progress listener
   * @param progressRequestListener Progress request listener
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   */
  public com.squareup.okhttp.Call callCacheDiffCall(
      String version,
      String workflowA,
      String callA,
      String workflowB,
      String callB,
      Integer indexA,
      Integer indexB,
      final ProgressResponseBody.ProgressListener progressListener,
      final ProgressRequestBody.ProgressRequestListener progressRequestListener)
      throws ApiException {
    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath =
        "/api/workflows/{version}/callcaching/diff"
            .replaceAll("\\{" + "version" + "\\}", apiClient.escapeString(version.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    if (workflowA != null)
      localVarQueryParams.addAll(apiClient.parameterToPair("workflowA", workflowA));
    if (callA != null) localVarQueryParams.addAll(apiClient.parameterToPair("callA", callA));
    if (indexA != null) localVarQueryParams.addAll(apiClient.parameterToPair("indexA", indexA));
    if (workflowB != null)
      localVarQueryParams.addAll(apiClient.parameterToPair("workflowB", workflowB));
    if (callB != null) localVarQueryParams.addAll(apiClient.parameterToPair("callB", callB));
    if (indexB != null) localVarQueryParams.addAll(apiClient.parameterToPair("indexB", indexB));

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {};

    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient
          .getHttpClient()
          .networkInterceptors()
          .add(
              new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(
                    com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                  com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                  return originalResponse
                      .newBuilder()
                      .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                      .build();
                }
              });
    }

    String[] localVarAuthNames = new String[] {};
    return apiClient.buildCall(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarFormParams,
        localVarAuthNames,
        progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private com.squareup.okhttp.Call callCacheDiffValidateBeforeCall(
      String version,
      String workflowA,
      String callA,
      String workflowB,
      String callB,
      Integer indexA,
      Integer indexB,
      final ProgressResponseBody.ProgressListener progressListener,
      final ProgressRequestBody.ProgressRequestListener progressRequestListener)
      throws ApiException {

    // verify the required parameter 'version' is set
    if (version == null) {
      throw new ApiException(
          "Missing the required parameter 'version' when calling callCacheDiff(Async)");
    }

    // verify the required parameter 'workflowA' is set
    if (workflowA == null) {
      throw new ApiException(
          "Missing the required parameter 'workflowA' when calling callCacheDiff(Async)");
    }

    // verify the required parameter 'callA' is set
    if (callA == null) {
      throw new ApiException(
          "Missing the required parameter 'callA' when calling callCacheDiff(Async)");
    }

    // verify the required parameter 'workflowB' is set
    if (workflowB == null) {
      throw new ApiException(
          "Missing the required parameter 'workflowB' when calling callCacheDiff(Async)");
    }

    // verify the required parameter 'callB' is set
    if (callB == null) {
      throw new ApiException(
          "Missing the required parameter 'callB' when calling callCacheDiff(Async)");
    }

    com.squareup.okhttp.Call call =
        callCacheDiffCall(
            version,
            workflowA,
            callA,
            workflowB,
            callB,
            indexA,
            indexB,
            progressListener,
            progressRequestListener);
    return call;
  }

  /**
   * Explain hashing differences for 2 calls This endpoint returns the hash differences between 2
   * completed (successfully or not) calls.
   *
   * @param version Cromwell API Version (required)
   * @param workflowA Workflow Id of the first workflow (required)
   * @param callA Fully qualified name, including workflow name, of the first call. (required)
   * @param workflowB Workflow Id of the second workflow (required)
   * @param callB Fully qualified name, including workflow name, of the second call (required)
   * @param indexA Shard index for the first call for cases where the requested call was part of a
   *     scatter. (optional)
   * @param indexB Shard index for the second call for cases where the requested call was part of a
   *     scatter. (optional)
   * @return WorkflowIdAndStatus
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *     response body
   */
  public WorkflowIdAndStatus callCacheDiff(
      String version,
      String workflowA,
      String callA,
      String workflowB,
      String callB,
      Integer indexA,
      Integer indexB)
      throws ApiException {
    ApiResponse<WorkflowIdAndStatus> resp =
        callCacheDiffWithHttpInfo(version, workflowA, callA, workflowB, callB, indexA, indexB);
    return resp.getData();
  }

  /**
   * Explain hashing differences for 2 calls This endpoint returns the hash differences between 2
   * completed (successfully or not) calls.
   *
   * @param version Cromwell API Version (required)
   * @param workflowA Workflow Id of the first workflow (required)
   * @param callA Fully qualified name, including workflow name, of the first call. (required)
   * @param workflowB Workflow Id of the second workflow (required)
   * @param callB Fully qualified name, including workflow name, of the second call (required)
   * @param indexA Shard index for the first call for cases where the requested call was part of a
   *     scatter. (optional)
   * @param indexB Shard index for the second call for cases where the requested call was part of a
   *     scatter. (optional)
   * @return ApiResponse&lt;WorkflowIdAndStatus&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *     response body
   */
  public ApiResponse<WorkflowIdAndStatus> callCacheDiffWithHttpInfo(
      String version,
      String workflowA,
      String callA,
      String workflowB,
      String callB,
      Integer indexA,
      Integer indexB)
      throws ApiException {
    com.squareup.okhttp.Call call =
        callCacheDiffValidateBeforeCall(
            version, workflowA, callA, workflowB, callB, indexA, indexB, null, null);
    Type localVarReturnType = new TypeToken<WorkflowIdAndStatus>() {}.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Explain hashing differences for 2 calls (asynchronously) This endpoint returns the hash
   * differences between 2 completed (successfully or not) calls.
   *
   * @param version Cromwell API Version (required)
   * @param workflowA Workflow Id of the first workflow (required)
   * @param callA Fully qualified name, including workflow name, of the first call. (required)
   * @param workflowB Workflow Id of the second workflow (required)
   * @param callB Fully qualified name, including workflow name, of the second call (required)
   * @param indexA Shard index for the first call for cases where the requested call was part of a
   *     scatter. (optional)
   * @param indexB Shard index for the second call for cases where the requested call was part of a
   *     scatter. (optional)
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call callCacheDiffAsync(
      String version,
      String workflowA,
      String callA,
      String workflowB,
      String callB,
      Integer indexA,
      Integer indexB,
      final ApiCallback<WorkflowIdAndStatus> callback)
      throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener =
          new ProgressResponseBody.ProgressListener() {
            @Override
            public void update(long bytesRead, long contentLength, boolean done) {
              callback.onDownloadProgress(bytesRead, contentLength, done);
            }
          };

      progressRequestListener =
          new ProgressRequestBody.ProgressRequestListener() {
            @Override
            public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
              callback.onUploadProgress(bytesWritten, contentLength, done);
            }
          };
    }

    com.squareup.okhttp.Call call =
        callCacheDiffValidateBeforeCall(
            version,
            workflowA,
            callA,
            workflowB,
            callB,
            indexA,
            indexB,
            progressListener,
            progressRequestListener);
    Type localVarReturnType = new TypeToken<WorkflowIdAndStatus>() {}.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }
  /**
   * Build call for labels
   *
   * @param version Cromwell API Version (required)
   * @param id A workflow ID (required)
   * @param progressListener Progress listener
   * @param progressRequestListener Progress request listener
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   */
  public com.squareup.okhttp.Call labelsCall(
      String version,
      String id,
      final ProgressResponseBody.ProgressListener progressListener,
      final ProgressRequestBody.ProgressRequestListener progressRequestListener)
      throws ApiException {
    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath =
        "/api/workflows/{version}/{id}/labels"
            .replaceAll("\\{" + "version" + "\\}", apiClient.escapeString(version.toString()))
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {};

    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient
          .getHttpClient()
          .networkInterceptors()
          .add(
              new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(
                    com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                  com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                  return originalResponse
                      .newBuilder()
                      .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                      .build();
                }
              });
    }

    String[] localVarAuthNames = new String[] {};
    return apiClient.buildCall(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarFormParams,
        localVarAuthNames,
        progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private com.squareup.okhttp.Call labelsValidateBeforeCall(
      String version,
      String id,
      final ProgressResponseBody.ProgressListener progressListener,
      final ProgressRequestBody.ProgressRequestListener progressRequestListener)
      throws ApiException {

    // verify the required parameter 'version' is set
    if (version == null) {
      throw new ApiException("Missing the required parameter 'version' when calling labels(Async)");
    }

    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException("Missing the required parameter 'id' when calling labels(Async)");
    }

    com.squareup.okhttp.Call call =
        labelsCall(version, id, progressListener, progressRequestListener);
    return call;
  }

  /**
   * Retrieves the current labels for a workflow
   *
   * @param version Cromwell API Version (required)
   * @param id A workflow ID (required)
   * @return LabelsResponse
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *     response body
   */
  public LabelsResponse labels(String version, String id) throws ApiException {
    ApiResponse<LabelsResponse> resp = labelsWithHttpInfo(version, id);
    return resp.getData();
  }

  /**
   * Retrieves the current labels for a workflow
   *
   * @param version Cromwell API Version (required)
   * @param id A workflow ID (required)
   * @return ApiResponse&lt;LabelsResponse&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *     response body
   */
  public ApiResponse<LabelsResponse> labelsWithHttpInfo(String version, String id)
      throws ApiException {
    com.squareup.okhttp.Call call = labelsValidateBeforeCall(version, id, null, null);
    Type localVarReturnType = new TypeToken<LabelsResponse>() {}.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Retrieves the current labels for a workflow (asynchronously)
   *
   * @param version Cromwell API Version (required)
   * @param id A workflow ID (required)
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call labelsAsync(
      String version, String id, final ApiCallback<LabelsResponse> callback) throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener =
          new ProgressResponseBody.ProgressListener() {
            @Override
            public void update(long bytesRead, long contentLength, boolean done) {
              callback.onDownloadProgress(bytesRead, contentLength, done);
            }
          };

      progressRequestListener =
          new ProgressRequestBody.ProgressRequestListener() {
            @Override
            public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
              callback.onUploadProgress(bytesWritten, contentLength, done);
            }
          };
    }

    com.squareup.okhttp.Call call =
        labelsValidateBeforeCall(version, id, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<LabelsResponse>() {}.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }
  /**
   * Build call for logs
   *
   * @param version Cromwell API Version (required)
   * @param id A workflow ID (required)
   * @param progressListener Progress listener
   * @param progressRequestListener Progress request listener
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   */
  public com.squareup.okhttp.Call logsCall(
      String version,
      String id,
      final ProgressResponseBody.ProgressListener progressListener,
      final ProgressRequestBody.ProgressRequestListener progressRequestListener)
      throws ApiException {
    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath =
        "/api/workflows/{version}/{id}/logs"
            .replaceAll("\\{" + "version" + "\\}", apiClient.escapeString(version.toString()))
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {};

    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient
          .getHttpClient()
          .networkInterceptors()
          .add(
              new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(
                    com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                  com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                  return originalResponse
                      .newBuilder()
                      .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                      .build();
                }
              });
    }

    String[] localVarAuthNames = new String[] {};
    return apiClient.buildCall(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarFormParams,
        localVarAuthNames,
        progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private com.squareup.okhttp.Call logsValidateBeforeCall(
      String version,
      String id,
      final ProgressResponseBody.ProgressListener progressListener,
      final ProgressRequestBody.ProgressRequestListener progressRequestListener)
      throws ApiException {

    // verify the required parameter 'version' is set
    if (version == null) {
      throw new ApiException("Missing the required parameter 'version' when calling logs(Async)");
    }

    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException("Missing the required parameter 'id' when calling logs(Async)");
    }

    com.squareup.okhttp.Call call =
        logsCall(version, id, progressListener, progressRequestListener);
    return call;
  }

  /**
   * Get the logs for a workflow Returns paths to the standard out and standard error files that
   * were generated during the execution of all calls in a workflow. A call has one or more standard
   * out and standard error logs, depending on if the call was scattered or not. In the latter case,
   * one log is provided for each instance of the call that has been run.
   *
   * @param version Cromwell API Version (required)
   * @param id A workflow ID (required)
   * @return WorkflowIdAndStatus
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *     response body
   */
  public WorkflowIdAndStatus logs(String version, String id) throws ApiException {
    ApiResponse<WorkflowIdAndStatus> resp = logsWithHttpInfo(version, id);
    return resp.getData();
  }

  /**
   * Get the logs for a workflow Returns paths to the standard out and standard error files that
   * were generated during the execution of all calls in a workflow. A call has one or more standard
   * out and standard error logs, depending on if the call was scattered or not. In the latter case,
   * one log is provided for each instance of the call that has been run.
   *
   * @param version Cromwell API Version (required)
   * @param id A workflow ID (required)
   * @return ApiResponse&lt;WorkflowIdAndStatus&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *     response body
   */
  public ApiResponse<WorkflowIdAndStatus> logsWithHttpInfo(String version, String id)
      throws ApiException {
    com.squareup.okhttp.Call call = logsValidateBeforeCall(version, id, null, null);
    Type localVarReturnType = new TypeToken<WorkflowIdAndStatus>() {}.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Get the logs for a workflow (asynchronously) Returns paths to the standard out and standard
   * error files that were generated during the execution of all calls in a workflow. A call has one
   * or more standard out and standard error logs, depending on if the call was scattered or not. In
   * the latter case, one log is provided for each instance of the call that has been run.
   *
   * @param version Cromwell API Version (required)
   * @param id A workflow ID (required)
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call logsAsync(
      String version, String id, final ApiCallback<WorkflowIdAndStatus> callback)
      throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener =
          new ProgressResponseBody.ProgressListener() {
            @Override
            public void update(long bytesRead, long contentLength, boolean done) {
              callback.onDownloadProgress(bytesRead, contentLength, done);
            }
          };

      progressRequestListener =
          new ProgressRequestBody.ProgressRequestListener() {
            @Override
            public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
              callback.onUploadProgress(bytesWritten, contentLength, done);
            }
          };
    }

    com.squareup.okhttp.Call call =
        logsValidateBeforeCall(version, id, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<WorkflowIdAndStatus>() {}.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }
  /**
   * Build call for metadata
   *
   * @param version Cromwell API Version (required)
   * @param id A workflow ID (required)
   * @param includeKey When specified key(s) to include from the metadata. Matches any key starting
   *     with the value. May not be used with excludeKey. This applies to all keys in the response,
   *     including within nested blocks. (optional)
   * @param excludeKey When specified key(s) to exclude from the metadata. Matches any key starting
   *     with the value. May not be used with includeKey. This applies to all keys in the response,
   *     including within nested blocks. (optional)
   * @param expandSubWorkflows When true, metadata for sub workflows will be fetched and inserted
   *     automatically in the metadata response. (optional, default to false)
   * @param progressListener Progress listener
   * @param progressRequestListener Progress request listener
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   */
  public com.squareup.okhttp.Call metadataCall(
      String version,
      String id,
      List<String> includeKey,
      List<String> excludeKey,
      Boolean expandSubWorkflows,
      final ProgressResponseBody.ProgressListener progressListener,
      final ProgressRequestBody.ProgressRequestListener progressRequestListener)
      throws ApiException {
    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath =
        "/api/workflows/{version}/{id}/metadata"
            .replaceAll("\\{" + "version" + "\\}", apiClient.escapeString(version.toString()))
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    if (includeKey != null)
      localVarCollectionQueryParams.addAll(
          apiClient.parameterToPairs("multi", "includeKey", includeKey));
    if (excludeKey != null)
      localVarCollectionQueryParams.addAll(
          apiClient.parameterToPairs("multi", "excludeKey", excludeKey));
    if (expandSubWorkflows != null)
      localVarQueryParams.addAll(
          apiClient.parameterToPair("expandSubWorkflows", expandSubWorkflows));

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {};

    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient
          .getHttpClient()
          .networkInterceptors()
          .add(
              new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(
                    com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                  com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                  return originalResponse
                      .newBuilder()
                      .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                      .build();
                }
              });
    }

    String[] localVarAuthNames = new String[] {};
    return apiClient.buildCall(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarFormParams,
        localVarAuthNames,
        progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private com.squareup.okhttp.Call metadataValidateBeforeCall(
      String version,
      String id,
      List<String> includeKey,
      List<String> excludeKey,
      Boolean expandSubWorkflows,
      final ProgressResponseBody.ProgressListener progressListener,
      final ProgressRequestBody.ProgressRequestListener progressRequestListener)
      throws ApiException {

    // verify the required parameter 'version' is set
    if (version == null) {
      throw new ApiException(
          "Missing the required parameter 'version' when calling metadata(Async)");
    }

    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException("Missing the required parameter 'id' when calling metadata(Async)");
    }

    com.squareup.okhttp.Call call =
        metadataCall(
            version,
            id,
            includeKey,
            excludeKey,
            expandSubWorkflows,
            progressListener,
            progressRequestListener);
    return call;
  }

  /**
   * Get workflow and call-level metadata for a specified workflow
   *
   * @param version Cromwell API Version (required)
   * @param id A workflow ID (required)
   * @param includeKey When specified key(s) to include from the metadata. Matches any key starting
   *     with the value. May not be used with excludeKey. This applies to all keys in the response,
   *     including within nested blocks. (optional)
   * @param excludeKey When specified key(s) to exclude from the metadata. Matches any key starting
   *     with the value. May not be used with includeKey. This applies to all keys in the response,
   *     including within nested blocks. (optional)
   * @param expandSubWorkflows When true, metadata for sub workflows will be fetched and inserted
   *     automatically in the metadata response. (optional, default to false)
   * @return WorkflowMetadataResponse
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *     response body
   */
  public WorkflowMetadataResponse metadata(
      String version,
      String id,
      List<String> includeKey,
      List<String> excludeKey,
      Boolean expandSubWorkflows)
      throws ApiException {
    ApiResponse<WorkflowMetadataResponse> resp =
        metadataWithHttpInfo(version, id, includeKey, excludeKey, expandSubWorkflows);
    return resp.getData();
  }

  /**
   * Get workflow and call-level metadata for a specified workflow
   *
   * @param version Cromwell API Version (required)
   * @param id A workflow ID (required)
   * @param includeKey When specified key(s) to include from the metadata. Matches any key starting
   *     with the value. May not be used with excludeKey. This applies to all keys in the response,
   *     including within nested blocks. (optional)
   * @param excludeKey When specified key(s) to exclude from the metadata. Matches any key starting
   *     with the value. May not be used with includeKey. This applies to all keys in the response,
   *     including within nested blocks. (optional)
   * @param expandSubWorkflows When true, metadata for sub workflows will be fetched and inserted
   *     automatically in the metadata response. (optional, default to false)
   * @return ApiResponse&lt;WorkflowMetadataResponse&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *     response body
   */
  public ApiResponse<WorkflowMetadataResponse> metadataWithHttpInfo(
      String version,
      String id,
      List<String> includeKey,
      List<String> excludeKey,
      Boolean expandSubWorkflows)
      throws ApiException {
    com.squareup.okhttp.Call call =
        metadataValidateBeforeCall(
            version, id, includeKey, excludeKey, expandSubWorkflows, null, null);
    Type localVarReturnType = new TypeToken<WorkflowMetadataResponse>() {}.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Get workflow and call-level metadata for a specified workflow (asynchronously)
   *
   * @param version Cromwell API Version (required)
   * @param id A workflow ID (required)
   * @param includeKey When specified key(s) to include from the metadata. Matches any key starting
   *     with the value. May not be used with excludeKey. This applies to all keys in the response,
   *     including within nested blocks. (optional)
   * @param excludeKey When specified key(s) to exclude from the metadata. Matches any key starting
   *     with the value. May not be used with includeKey. This applies to all keys in the response,
   *     including within nested blocks. (optional)
   * @param expandSubWorkflows When true, metadata for sub workflows will be fetched and inserted
   *     automatically in the metadata response. (optional, default to false)
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call metadataAsync(
      String version,
      String id,
      List<String> includeKey,
      List<String> excludeKey,
      Boolean expandSubWorkflows,
      final ApiCallback<WorkflowMetadataResponse> callback)
      throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener =
          new ProgressResponseBody.ProgressListener() {
            @Override
            public void update(long bytesRead, long contentLength, boolean done) {
              callback.onDownloadProgress(bytesRead, contentLength, done);
            }
          };

      progressRequestListener =
          new ProgressRequestBody.ProgressRequestListener() {
            @Override
            public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
              callback.onUploadProgress(bytesWritten, contentLength, done);
            }
          };
    }

    com.squareup.okhttp.Call call =
        metadataValidateBeforeCall(
            version,
            id,
            includeKey,
            excludeKey,
            expandSubWorkflows,
            progressListener,
            progressRequestListener);
    Type localVarReturnType = new TypeToken<WorkflowMetadataResponse>() {}.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }
  /**
   * Build call for outputs
   *
   * @param version Cromwell API Version (required)
   * @param id A workflow ID (required)
   * @param progressListener Progress listener
   * @param progressRequestListener Progress request listener
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   */
  public com.squareup.okhttp.Call outputsCall(
      String version,
      String id,
      final ProgressResponseBody.ProgressListener progressListener,
      final ProgressRequestBody.ProgressRequestListener progressRequestListener)
      throws ApiException {
    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath =
        "/api/workflows/{version}/{id}/outputs"
            .replaceAll("\\{" + "version" + "\\}", apiClient.escapeString(version.toString()))
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {};

    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient
          .getHttpClient()
          .networkInterceptors()
          .add(
              new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(
                    com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                  com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                  return originalResponse
                      .newBuilder()
                      .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                      .build();
                }
              });
    }

    String[] localVarAuthNames = new String[] {};
    return apiClient.buildCall(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarFormParams,
        localVarAuthNames,
        progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private com.squareup.okhttp.Call outputsValidateBeforeCall(
      String version,
      String id,
      final ProgressResponseBody.ProgressListener progressListener,
      final ProgressRequestBody.ProgressRequestListener progressRequestListener)
      throws ApiException {

    // verify the required parameter 'version' is set
    if (version == null) {
      throw new ApiException(
          "Missing the required parameter 'version' when calling outputs(Async)");
    }

    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException("Missing the required parameter 'id' when calling outputs(Async)");
    }

    com.squareup.okhttp.Call call =
        outputsCall(version, id, progressListener, progressRequestListener);
    return call;
  }

  /**
   * Get the outputs for a workflow Retrieve the outputs for the specified workflow. Cromwell will
   * return any outputs which currently exist even if a workflow has not successfully completed.
   *
   * @param version Cromwell API Version (required)
   * @param id A workflow ID (required)
   * @return WorkflowIdAndStatus
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *     response body
   */
  public WorkflowIdAndStatus outputs(String version, String id) throws ApiException {
    ApiResponse<WorkflowIdAndStatus> resp = outputsWithHttpInfo(version, id);
    return resp.getData();
  }

  /**
   * Get the outputs for a workflow Retrieve the outputs for the specified workflow. Cromwell will
   * return any outputs which currently exist even if a workflow has not successfully completed.
   *
   * @param version Cromwell API Version (required)
   * @param id A workflow ID (required)
   * @return ApiResponse&lt;WorkflowIdAndStatus&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *     response body
   */
  public ApiResponse<WorkflowIdAndStatus> outputsWithHttpInfo(String version, String id)
      throws ApiException {
    com.squareup.okhttp.Call call = outputsValidateBeforeCall(version, id, null, null);
    Type localVarReturnType = new TypeToken<WorkflowIdAndStatus>() {}.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Get the outputs for a workflow (asynchronously) Retrieve the outputs for the specified
   * workflow. Cromwell will return any outputs which currently exist even if a workflow has not
   * successfully completed.
   *
   * @param version Cromwell API Version (required)
   * @param id A workflow ID (required)
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call outputsAsync(
      String version, String id, final ApiCallback<WorkflowIdAndStatus> callback)
      throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener =
          new ProgressResponseBody.ProgressListener() {
            @Override
            public void update(long bytesRead, long contentLength, boolean done) {
              callback.onDownloadProgress(bytesRead, contentLength, done);
            }
          };

      progressRequestListener =
          new ProgressRequestBody.ProgressRequestListener() {
            @Override
            public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
              callback.onUploadProgress(bytesWritten, contentLength, done);
            }
          };
    }

    com.squareup.okhttp.Call call =
        outputsValidateBeforeCall(version, id, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<WorkflowIdAndStatus>() {}.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }
  /**
   * Build call for query
   *
   * @param version Cromwell API Version (required)
   * @param submission Returns only workflows with an equal or later submission time. Can be
   *     specified at most once. If both submission time and start date are specified, submission
   *     time should be before or equal to start date. (optional)
   * @param start Returns only workflows with an equal or later start datetime. Can be specified at
   *     most once. If both start and end date are specified, start date must be before or equal to
   *     end date. (optional)
   * @param end Returns only workflows with an equal or earlier end datetime. Can be specified at
   *     most once. If both start and end date are specified, start date must be before or equal to
   *     end date. (optional)
   * @param status Returns only workflows with the specified status. If specified multiple times,
   *     returns workflows in any of the specified statuses. (optional)
   * @param name Returns only workflows with the specified name. If specified multiple times,
   *     returns workflows with any of the specified names. (optional)
   * @param id Returns only workflows with the specified workflow id. If specified multiple times,
   *     returns workflows with any of the specified workflow ids. (optional)
   * @param label Returns workflows with the specified label keys. If specified multiple times,
   *     returns workflows with all of the specified label keys. Specify the label key and label
   *     value pair as separated with \&quot;label-key:label-value\&quot; (optional)
   * @param labelor Returns workflows with the specified label keys. If specified multiple times,
   *     returns workflows with any of the specified label keys. Specify the label key and label
   *     value pair as separated with \&quot;label-key:label-value\&quot; (optional)
   * @param excludeLabelAnd Excludes workflows with the specified label. If specified multiple
   *     times, excludes workflows with all of the specified label keys. Specify the label key and
   *     label value pair as separated with \&quot;label-key:label-value\&quot; (optional)
   * @param excludeLabelOr Excludes workflows with the specified label. If specified multiple times,
   *     excludes workflows with any of the specified label keys. Specify the label key and label
   *     value pair as separated with \&quot;label-key:label-value\&quot; (optional)
   * @param additionalQueryResultFields Includes the specified keys in the metadata for the returned
   *     workflows. (optional)
   * @param includeSubworkflows Include subworkflows in results. By default, it is taken as true.
   *     (optional)
   * @param progressListener Progress listener
   * @param progressRequestListener Progress request listener
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   */
  public com.squareup.okhttp.Call queryCall(
      String version,
      OffsetDateTime submission,
      OffsetDateTime start,
      OffsetDateTime end,
      List<String> status,
      List<String> name,
      List<String> id,
      List<String> label,
      List<String> labelor,
      List<String> excludeLabelAnd,
      List<String> excludeLabelOr,
      List<String> additionalQueryResultFields,
      Boolean includeSubworkflows,
      final ProgressResponseBody.ProgressListener progressListener,
      final ProgressRequestBody.ProgressRequestListener progressRequestListener)
      throws ApiException {
    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath =
        "/api/workflows/{version}/query"
            .replaceAll("\\{" + "version" + "\\}", apiClient.escapeString(version.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    if (submission != null)
      localVarQueryParams.addAll(apiClient.parameterToPair("submission", submission));
    if (start != null) localVarQueryParams.addAll(apiClient.parameterToPair("start", start));
    if (end != null) localVarQueryParams.addAll(apiClient.parameterToPair("end", end));
    if (status != null)
      localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "status", status));
    if (name != null)
      localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "name", name));
    if (id != null)
      localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "id", id));
    if (label != null)
      localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "label", label));
    if (labelor != null)
      localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "labelor", labelor));
    if (excludeLabelAnd != null)
      localVarCollectionQueryParams.addAll(
          apiClient.parameterToPairs("multi", "excludeLabelAnd", excludeLabelAnd));
    if (excludeLabelOr != null)
      localVarCollectionQueryParams.addAll(
          apiClient.parameterToPairs("multi", "excludeLabelOr", excludeLabelOr));
    if (additionalQueryResultFields != null)
      localVarCollectionQueryParams.addAll(
          apiClient.parameterToPairs(
              "multi", "additionalQueryResultFields", additionalQueryResultFields));
    if (includeSubworkflows != null)
      localVarQueryParams.addAll(
          apiClient.parameterToPair("includeSubworkflows", includeSubworkflows));

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {};

    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient
          .getHttpClient()
          .networkInterceptors()
          .add(
              new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(
                    com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                  com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                  return originalResponse
                      .newBuilder()
                      .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                      .build();
                }
              });
    }

    String[] localVarAuthNames = new String[] {};
    return apiClient.buildCall(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarFormParams,
        localVarAuthNames,
        progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private com.squareup.okhttp.Call queryValidateBeforeCall(
      String version,
      OffsetDateTime submission,
      OffsetDateTime start,
      OffsetDateTime end,
      List<String> status,
      List<String> name,
      List<String> id,
      List<String> label,
      List<String> labelor,
      List<String> excludeLabelAnd,
      List<String> excludeLabelOr,
      List<String> additionalQueryResultFields,
      Boolean includeSubworkflows,
      final ProgressResponseBody.ProgressListener progressListener,
      final ProgressRequestBody.ProgressRequestListener progressRequestListener)
      throws ApiException {

    // verify the required parameter 'version' is set
    if (version == null) {
      throw new ApiException("Missing the required parameter 'version' when calling query(Async)");
    }

    com.squareup.okhttp.Call call =
        queryCall(
            version,
            submission,
            start,
            end,
            status,
            name,
            id,
            label,
            labelor,
            excludeLabelAnd,
            excludeLabelOr,
            additionalQueryResultFields,
            includeSubworkflows,
            progressListener,
            progressRequestListener);
    return call;
  }

  /**
   * Get workflows matching some criteria Query for workflows which match various criteria. When a
   * combination of criteria are applied the endpoint will return
   *
   * @param version Cromwell API Version (required)
   * @param submission Returns only workflows with an equal or later submission time. Can be
   *     specified at most once. If both submission time and start date are specified, submission
   *     time should be before or equal to start date. (optional)
   * @param start Returns only workflows with an equal or later start datetime. Can be specified at
   *     most once. If both start and end date are specified, start date must be before or equal to
   *     end date. (optional)
   * @param end Returns only workflows with an equal or earlier end datetime. Can be specified at
   *     most once. If both start and end date are specified, start date must be before or equal to
   *     end date. (optional)
   * @param status Returns only workflows with the specified status. If specified multiple times,
   *     returns workflows in any of the specified statuses. (optional)
   * @param name Returns only workflows with the specified name. If specified multiple times,
   *     returns workflows with any of the specified names. (optional)
   * @param id Returns only workflows with the specified workflow id. If specified multiple times,
   *     returns workflows with any of the specified workflow ids. (optional)
   * @param label Returns workflows with the specified label keys. If specified multiple times,
   *     returns workflows with all of the specified label keys. Specify the label key and label
   *     value pair as separated with \&quot;label-key:label-value\&quot; (optional)
   * @param labelor Returns workflows with the specified label keys. If specified multiple times,
   *     returns workflows with any of the specified label keys. Specify the label key and label
   *     value pair as separated with \&quot;label-key:label-value\&quot; (optional)
   * @param excludeLabelAnd Excludes workflows with the specified label. If specified multiple
   *     times, excludes workflows with all of the specified label keys. Specify the label key and
   *     label value pair as separated with \&quot;label-key:label-value\&quot; (optional)
   * @param excludeLabelOr Excludes workflows with the specified label. If specified multiple times,
   *     excludes workflows with any of the specified label keys. Specify the label key and label
   *     value pair as separated with \&quot;label-key:label-value\&quot; (optional)
   * @param additionalQueryResultFields Includes the specified keys in the metadata for the returned
   *     workflows. (optional)
   * @param includeSubworkflows Include subworkflows in results. By default, it is taken as true.
   *     (optional)
   * @return WorkflowQueryResponse
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *     response body
   */
  public WorkflowQueryResponse query(
      String version,
      OffsetDateTime submission,
      OffsetDateTime start,
      OffsetDateTime end,
      List<String> status,
      List<String> name,
      List<String> id,
      List<String> label,
      List<String> labelor,
      List<String> excludeLabelAnd,
      List<String> excludeLabelOr,
      List<String> additionalQueryResultFields,
      Boolean includeSubworkflows)
      throws ApiException {
    ApiResponse<WorkflowQueryResponse> resp =
        queryWithHttpInfo(
            version,
            submission,
            start,
            end,
            status,
            name,
            id,
            label,
            labelor,
            excludeLabelAnd,
            excludeLabelOr,
            additionalQueryResultFields,
            includeSubworkflows);
    return resp.getData();
  }

  /**
   * Get workflows matching some criteria Query for workflows which match various criteria. When a
   * combination of criteria are applied the endpoint will return
   *
   * @param version Cromwell API Version (required)
   * @param submission Returns only workflows with an equal or later submission time. Can be
   *     specified at most once. If both submission time and start date are specified, submission
   *     time should be before or equal to start date. (optional)
   * @param start Returns only workflows with an equal or later start datetime. Can be specified at
   *     most once. If both start and end date are specified, start date must be before or equal to
   *     end date. (optional)
   * @param end Returns only workflows with an equal or earlier end datetime. Can be specified at
   *     most once. If both start and end date are specified, start date must be before or equal to
   *     end date. (optional)
   * @param status Returns only workflows with the specified status. If specified multiple times,
   *     returns workflows in any of the specified statuses. (optional)
   * @param name Returns only workflows with the specified name. If specified multiple times,
   *     returns workflows with any of the specified names. (optional)
   * @param id Returns only workflows with the specified workflow id. If specified multiple times,
   *     returns workflows with any of the specified workflow ids. (optional)
   * @param label Returns workflows with the specified label keys. If specified multiple times,
   *     returns workflows with all of the specified label keys. Specify the label key and label
   *     value pair as separated with \&quot;label-key:label-value\&quot; (optional)
   * @param labelor Returns workflows with the specified label keys. If specified multiple times,
   *     returns workflows with any of the specified label keys. Specify the label key and label
   *     value pair as separated with \&quot;label-key:label-value\&quot; (optional)
   * @param excludeLabelAnd Excludes workflows with the specified label. If specified multiple
   *     times, excludes workflows with all of the specified label keys. Specify the label key and
   *     label value pair as separated with \&quot;label-key:label-value\&quot; (optional)
   * @param excludeLabelOr Excludes workflows with the specified label. If specified multiple times,
   *     excludes workflows with any of the specified label keys. Specify the label key and label
   *     value pair as separated with \&quot;label-key:label-value\&quot; (optional)
   * @param additionalQueryResultFields Includes the specified keys in the metadata for the returned
   *     workflows. (optional)
   * @param includeSubworkflows Include subworkflows in results. By default, it is taken as true.
   *     (optional)
   * @return ApiResponse&lt;WorkflowQueryResponse&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *     response body
   */
  public ApiResponse<WorkflowQueryResponse> queryWithHttpInfo(
      String version,
      OffsetDateTime submission,
      OffsetDateTime start,
      OffsetDateTime end,
      List<String> status,
      List<String> name,
      List<String> id,
      List<String> label,
      List<String> labelor,
      List<String> excludeLabelAnd,
      List<String> excludeLabelOr,
      List<String> additionalQueryResultFields,
      Boolean includeSubworkflows)
      throws ApiException {
    com.squareup.okhttp.Call call =
        queryValidateBeforeCall(
            version,
            submission,
            start,
            end,
            status,
            name,
            id,
            label,
            labelor,
            excludeLabelAnd,
            excludeLabelOr,
            additionalQueryResultFields,
            includeSubworkflows,
            null,
            null);
    Type localVarReturnType = new TypeToken<WorkflowQueryResponse>() {}.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Get workflows matching some criteria (asynchronously) Query for workflows which match various
   * criteria. When a combination of criteria are applied the endpoint will return
   *
   * @param version Cromwell API Version (required)
   * @param submission Returns only workflows with an equal or later submission time. Can be
   *     specified at most once. If both submission time and start date are specified, submission
   *     time should be before or equal to start date. (optional)
   * @param start Returns only workflows with an equal or later start datetime. Can be specified at
   *     most once. If both start and end date are specified, start date must be before or equal to
   *     end date. (optional)
   * @param end Returns only workflows with an equal or earlier end datetime. Can be specified at
   *     most once. If both start and end date are specified, start date must be before or equal to
   *     end date. (optional)
   * @param status Returns only workflows with the specified status. If specified multiple times,
   *     returns workflows in any of the specified statuses. (optional)
   * @param name Returns only workflows with the specified name. If specified multiple times,
   *     returns workflows with any of the specified names. (optional)
   * @param id Returns only workflows with the specified workflow id. If specified multiple times,
   *     returns workflows with any of the specified workflow ids. (optional)
   * @param label Returns workflows with the specified label keys. If specified multiple times,
   *     returns workflows with all of the specified label keys. Specify the label key and label
   *     value pair as separated with \&quot;label-key:label-value\&quot; (optional)
   * @param labelor Returns workflows with the specified label keys. If specified multiple times,
   *     returns workflows with any of the specified label keys. Specify the label key and label
   *     value pair as separated with \&quot;label-key:label-value\&quot; (optional)
   * @param excludeLabelAnd Excludes workflows with the specified label. If specified multiple
   *     times, excludes workflows with all of the specified label keys. Specify the label key and
   *     label value pair as separated with \&quot;label-key:label-value\&quot; (optional)
   * @param excludeLabelOr Excludes workflows with the specified label. If specified multiple times,
   *     excludes workflows with any of the specified label keys. Specify the label key and label
   *     value pair as separated with \&quot;label-key:label-value\&quot; (optional)
   * @param additionalQueryResultFields Includes the specified keys in the metadata for the returned
   *     workflows. (optional)
   * @param includeSubworkflows Include subworkflows in results. By default, it is taken as true.
   *     (optional)
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call queryAsync(
      String version,
      OffsetDateTime submission,
      OffsetDateTime start,
      OffsetDateTime end,
      List<String> status,
      List<String> name,
      List<String> id,
      List<String> label,
      List<String> labelor,
      List<String> excludeLabelAnd,
      List<String> excludeLabelOr,
      List<String> additionalQueryResultFields,
      Boolean includeSubworkflows,
      final ApiCallback<WorkflowQueryResponse> callback)
      throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener =
          new ProgressResponseBody.ProgressListener() {
            @Override
            public void update(long bytesRead, long contentLength, boolean done) {
              callback.onDownloadProgress(bytesRead, contentLength, done);
            }
          };

      progressRequestListener =
          new ProgressRequestBody.ProgressRequestListener() {
            @Override
            public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
              callback.onUploadProgress(bytesWritten, contentLength, done);
            }
          };
    }

    com.squareup.okhttp.Call call =
        queryValidateBeforeCall(
            version,
            submission,
            start,
            end,
            status,
            name,
            id,
            label,
            labelor,
            excludeLabelAnd,
            excludeLabelOr,
            additionalQueryResultFields,
            includeSubworkflows,
            progressListener,
            progressRequestListener);
    Type localVarReturnType = new TypeToken<WorkflowQueryResponse>() {}.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }
  /**
   * Build call for query_0
   *
   * @param version Cromwell API Version (required)
   * @param parameters Same query parameters as GET /query endpoint, submitted as a json list.
   *     Example:
   *     [{\&quot;status\&quot;:\&quot;Success\&quot;},{\&quot;status\&quot;:\&quot;Failed\&quot;}]
   *     (required)
   * @param progressListener Progress listener
   * @param progressRequestListener Progress request listener
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   */
  public com.squareup.okhttp.Call query_0Call(
      String version,
      List<WorkflowQueryParameter> parameters,
      final ProgressResponseBody.ProgressListener progressListener,
      final ProgressRequestBody.ProgressRequestListener progressRequestListener)
      throws ApiException {
    Object localVarPostBody = parameters;

    // create path and map variables
    String localVarPath =
        "/api/workflows/{version}/query"
            .replaceAll("\\{" + "version" + "\\}", apiClient.escapeString(version.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {};

    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient
          .getHttpClient()
          .networkInterceptors()
          .add(
              new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(
                    com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                  com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                  return originalResponse
                      .newBuilder()
                      .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                      .build();
                }
              });
    }

    String[] localVarAuthNames = new String[] {};
    return apiClient.buildCall(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarFormParams,
        localVarAuthNames,
        progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private com.squareup.okhttp.Call query_0ValidateBeforeCall(
      String version,
      List<WorkflowQueryParameter> parameters,
      final ProgressResponseBody.ProgressListener progressListener,
      final ProgressRequestBody.ProgressRequestListener progressRequestListener)
      throws ApiException {

    // verify the required parameter 'version' is set
    if (version == null) {
      throw new ApiException(
          "Missing the required parameter 'version' when calling query_0(Async)");
    }

    // verify the required parameter 'parameters' is set
    if (parameters == null) {
      throw new ApiException(
          "Missing the required parameter 'parameters' when calling query_0(Async)");
    }

    com.squareup.okhttp.Call call =
        query_0Call(version, parameters, progressListener, progressRequestListener);
    return call;
  }

  /**
   * Get workflows matching some criteria Query workflows by start dates, end dates, names, ids,
   * labels, or statuses.
   *
   * @param version Cromwell API Version (required)
   * @param parameters Same query parameters as GET /query endpoint, submitted as a json list.
   *     Example:
   *     [{\&quot;status\&quot;:\&quot;Success\&quot;},{\&quot;status\&quot;:\&quot;Failed\&quot;}]
   *     (required)
   * @return WorkflowQueryResponse
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *     response body
   */
  public WorkflowQueryResponse query_0(String version, List<WorkflowQueryParameter> parameters)
      throws ApiException {
    ApiResponse<WorkflowQueryResponse> resp = query_0WithHttpInfo(version, parameters);
    return resp.getData();
  }

  /**
   * Get workflows matching some criteria Query workflows by start dates, end dates, names, ids,
   * labels, or statuses.
   *
   * @param version Cromwell API Version (required)
   * @param parameters Same query parameters as GET /query endpoint, submitted as a json list.
   *     Example:
   *     [{\&quot;status\&quot;:\&quot;Success\&quot;},{\&quot;status\&quot;:\&quot;Failed\&quot;}]
   *     (required)
   * @return ApiResponse&lt;WorkflowQueryResponse&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *     response body
   */
  public ApiResponse<WorkflowQueryResponse> query_0WithHttpInfo(
      String version, List<WorkflowQueryParameter> parameters) throws ApiException {
    com.squareup.okhttp.Call call = query_0ValidateBeforeCall(version, parameters, null, null);
    Type localVarReturnType = new TypeToken<WorkflowQueryResponse>() {}.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Get workflows matching some criteria (asynchronously) Query workflows by start dates, end
   * dates, names, ids, labels, or statuses.
   *
   * @param version Cromwell API Version (required)
   * @param parameters Same query parameters as GET /query endpoint, submitted as a json list.
   *     Example:
   *     [{\&quot;status\&quot;:\&quot;Success\&quot;},{\&quot;status\&quot;:\&quot;Failed\&quot;}]
   *     (required)
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call query_0Async(
      String version,
      List<WorkflowQueryParameter> parameters,
      final ApiCallback<WorkflowQueryResponse> callback)
      throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener =
          new ProgressResponseBody.ProgressListener() {
            @Override
            public void update(long bytesRead, long contentLength, boolean done) {
              callback.onDownloadProgress(bytesRead, contentLength, done);
            }
          };

      progressRequestListener =
          new ProgressRequestBody.ProgressRequestListener() {
            @Override
            public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
              callback.onUploadProgress(bytesWritten, contentLength, done);
            }
          };
    }

    com.squareup.okhttp.Call call =
        query_0ValidateBeforeCall(version, parameters, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<WorkflowQueryResponse>() {}.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }
  /**
   * Build call for releaseHold
   *
   * @param version Cromwell API Version (required)
   * @param id A workflow ID (required)
   * @param progressListener Progress listener
   * @param progressRequestListener Progress request listener
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   */
  public com.squareup.okhttp.Call releaseHoldCall(
      String version,
      String id,
      final ProgressResponseBody.ProgressListener progressListener,
      final ProgressRequestBody.ProgressRequestListener progressRequestListener)
      throws ApiException {
    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath =
        "/api/workflows/{version}/{id}/releaseHold"
            .replaceAll("\\{" + "version" + "\\}", apiClient.escapeString(version.toString()))
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {};

    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient
          .getHttpClient()
          .networkInterceptors()
          .add(
              new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(
                    com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                  com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                  return originalResponse
                      .newBuilder()
                      .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                      .build();
                }
              });
    }

    String[] localVarAuthNames = new String[] {};
    return apiClient.buildCall(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarFormParams,
        localVarAuthNames,
        progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private com.squareup.okhttp.Call releaseHoldValidateBeforeCall(
      String version,
      String id,
      final ProgressResponseBody.ProgressListener progressListener,
      final ProgressRequestBody.ProgressRequestListener progressRequestListener)
      throws ApiException {

    // verify the required parameter 'version' is set
    if (version == null) {
      throw new ApiException(
          "Missing the required parameter 'version' when calling releaseHold(Async)");
    }

    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException("Missing the required parameter 'id' when calling releaseHold(Async)");
    }

    com.squareup.okhttp.Call call =
        releaseHoldCall(version, id, progressListener, progressRequestListener);
    return call;
  }

  /**
   * Switch a workflow from &#39;On Hold&#39; to &#39;Submitted&#39; status Request Cromwell to
   * release the hold on a workflow. It will switch the status of a workflow from &#39;On Hold&#39;
   * to &#39;Submitted&#39; so it can be picked for running. For instance this might be necessary in
   * cases where you have submitted a workflow with workflowOnHold &#x3D; true.
   *
   * @param version Cromwell API Version (required)
   * @param id A workflow ID (required)
   * @return WorkflowIdAndStatus
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *     response body
   */
  public WorkflowIdAndStatus releaseHold(String version, String id) throws ApiException {
    ApiResponse<WorkflowIdAndStatus> resp = releaseHoldWithHttpInfo(version, id);
    return resp.getData();
  }

  /**
   * Switch a workflow from &#39;On Hold&#39; to &#39;Submitted&#39; status Request Cromwell to
   * release the hold on a workflow. It will switch the status of a workflow from &#39;On Hold&#39;
   * to &#39;Submitted&#39; so it can be picked for running. For instance this might be necessary in
   * cases where you have submitted a workflow with workflowOnHold &#x3D; true.
   *
   * @param version Cromwell API Version (required)
   * @param id A workflow ID (required)
   * @return ApiResponse&lt;WorkflowIdAndStatus&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *     response body
   */
  public ApiResponse<WorkflowIdAndStatus> releaseHoldWithHttpInfo(String version, String id)
      throws ApiException {
    com.squareup.okhttp.Call call = releaseHoldValidateBeforeCall(version, id, null, null);
    Type localVarReturnType = new TypeToken<WorkflowIdAndStatus>() {}.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Switch a workflow from &#39;On Hold&#39; to &#39;Submitted&#39; status (asynchronously) Request
   * Cromwell to release the hold on a workflow. It will switch the status of a workflow from
   * &#39;On Hold&#39; to &#39;Submitted&#39; so it can be picked for running. For instance this
   * might be necessary in cases where you have submitted a workflow with workflowOnHold &#x3D;
   * true.
   *
   * @param version Cromwell API Version (required)
   * @param id A workflow ID (required)
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call releaseHoldAsync(
      String version, String id, final ApiCallback<WorkflowIdAndStatus> callback)
      throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener =
          new ProgressResponseBody.ProgressListener() {
            @Override
            public void update(long bytesRead, long contentLength, boolean done) {
              callback.onDownloadProgress(bytesRead, contentLength, done);
            }
          };

      progressRequestListener =
          new ProgressRequestBody.ProgressRequestListener() {
            @Override
            public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
              callback.onUploadProgress(bytesWritten, contentLength, done);
            }
          };
    }

    com.squareup.okhttp.Call call =
        releaseHoldValidateBeforeCall(version, id, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<WorkflowIdAndStatus>() {}.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }
  /**
   * Build call for status
   *
   * @param version Cromwell API Version (required)
   * @param id A workflow ID (required)
   * @param progressListener Progress listener
   * @param progressRequestListener Progress request listener
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   */
  public com.squareup.okhttp.Call statusCall(
      String version,
      String id,
      final ProgressResponseBody.ProgressListener progressListener,
      final ProgressRequestBody.ProgressRequestListener progressRequestListener)
      throws ApiException {
    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath =
        "/api/workflows/{version}/{id}/status"
            .replaceAll("\\{" + "version" + "\\}", apiClient.escapeString(version.toString()))
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {};

    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient
          .getHttpClient()
          .networkInterceptors()
          .add(
              new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(
                    com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                  com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                  return originalResponse
                      .newBuilder()
                      .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                      .build();
                }
              });
    }

    String[] localVarAuthNames = new String[] {};
    return apiClient.buildCall(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarFormParams,
        localVarAuthNames,
        progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private com.squareup.okhttp.Call statusValidateBeforeCall(
      String version,
      String id,
      final ProgressResponseBody.ProgressListener progressListener,
      final ProgressRequestBody.ProgressRequestListener progressRequestListener)
      throws ApiException {

    // verify the required parameter 'version' is set
    if (version == null) {
      throw new ApiException("Missing the required parameter 'version' when calling status(Async)");
    }

    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException("Missing the required parameter 'id' when calling status(Async)");
    }

    com.squareup.okhttp.Call call =
        statusCall(version, id, progressListener, progressRequestListener);
    return call;
  }

  /**
   * Retrieves the current state for a workflow
   *
   * @param version Cromwell API Version (required)
   * @param id A workflow ID (required)
   * @return WorkflowIdAndStatus
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *     response body
   */
  public WorkflowIdAndStatus status(String version, String id) throws ApiException {
    ApiResponse<WorkflowIdAndStatus> resp = statusWithHttpInfo(version, id);
    return resp.getData();
  }

  /**
   * Retrieves the current state for a workflow
   *
   * @param version Cromwell API Version (required)
   * @param id A workflow ID (required)
   * @return ApiResponse&lt;WorkflowIdAndStatus&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *     response body
   */
  public ApiResponse<WorkflowIdAndStatus> statusWithHttpInfo(String version, String id)
      throws ApiException {
    com.squareup.okhttp.Call call = statusValidateBeforeCall(version, id, null, null);
    Type localVarReturnType = new TypeToken<WorkflowIdAndStatus>() {}.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Retrieves the current state for a workflow (asynchronously)
   *
   * @param version Cromwell API Version (required)
   * @param id A workflow ID (required)
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call statusAsync(
      String version, String id, final ApiCallback<WorkflowIdAndStatus> callback)
      throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener =
          new ProgressResponseBody.ProgressListener() {
            @Override
            public void update(long bytesRead, long contentLength, boolean done) {
              callback.onDownloadProgress(bytesRead, contentLength, done);
            }
          };

      progressRequestListener =
          new ProgressRequestBody.ProgressRequestListener() {
            @Override
            public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
              callback.onUploadProgress(bytesWritten, contentLength, done);
            }
          };
    }

    com.squareup.okhttp.Call call =
        statusValidateBeforeCall(version, id, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<WorkflowIdAndStatus>() {}.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }
  /**
   * Build call for submit
   *
   * @param version Cromwell API Version (required)
   * @param workflowSource The workflow source file to submit for execution. Either workflow source
   *     or workflow url is required. (optional)
   * @param workflowUrl URL which points to the workflow. Either workflow source or workflow url is
   *     required. (optional)
   * @param workflowOnHold Put workflow on hold upon submission. By default, it is taken as false.
   *     (optional)
   * @param workflowInputs JSON or YAML file containing the inputs as an object. For WDL workflows a
   *     skeleton file can be generated from WOMtool using the \&quot;inputs\&quot; subcommand. When
   *     multiple files are specified, in case of key conflicts between multiple input JSON files,
   *     higher values of x in workflowInputs_x override lower values. For example, an input
   *     specified in workflowInputs_3 will override an input with the same name in workflowInputs
   *     or workflowInputs_2. Similarly, an input key specified in workflowInputs_5 will override an
   *     identical input key in any other input file. (optional)
   * @param workflowInputs2 A second JSON or YAML file containing inputs. (optional)
   * @param workflowInputs3 A third JSON or YAML file containing inputs. (optional)
   * @param workflowInputs4 A fourth JSON or YAML file containing inputs. (optional)
   * @param workflowInputs5 A fifth JSON or YAML file containing inputs. (optional)
   * @param workflowOptions JSON file containing configuration options for the execution of this
   *     workflow. (optional)
   * @param workflowType The workflow language for the file you submitted. Cromwell currently
   *     supports WDL and CWL. (optional)
   * @param workflowRoot The root object to be run. Only necessary for CWL submissions containing
   *     multiple objects (in an array). (optional)
   * @param workflowTypeVersion The specification version for the workflow language being used. For
   *     WDL, Cromwell currently supports draft-2 and 1.0. For CWL, Cromwell currently supports
   *     v1.0. (optional)
   * @param labels JSON object of labels to apply to this workflow. (optional)
   * @param workflowDependencies ZIP file containing workflow source files that are used to resolve
   *     local imports. This zip bundle will be unpacked in a sandbox accessible to this workflow.
   *     (optional)
   * @param progressListener Progress listener
   * @param progressRequestListener Progress request listener
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   */
  public com.squareup.okhttp.Call submitCall(
      String version,
      String workflowSource,
      String workflowUrl,
      Boolean workflowOnHold,
      String workflowInputs,
      String workflowInputs2,
      String workflowInputs3,
      String workflowInputs4,
      String workflowInputs5,
      String workflowOptions,
      String workflowType,
      String workflowRoot,
      String workflowTypeVersion,
      String labels,
      String workflowDependencies,
      final ProgressResponseBody.ProgressListener progressListener,
      final ProgressRequestBody.ProgressRequestListener progressRequestListener)
      throws ApiException {
    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath =
        "/api/workflows/{version}"
            .replaceAll("\\{" + "version" + "\\}", apiClient.escapeString(version.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();
    if (workflowSource != null) localVarFormParams.put("workflowSource", workflowSource);
    if (workflowUrl != null) localVarFormParams.put("workflowUrl", workflowUrl);
    if (workflowOnHold != null) localVarFormParams.put("workflowOnHold", workflowOnHold);
    if (workflowInputs != null) localVarFormParams.put("workflowInputs", workflowInputs);
    if (workflowInputs2 != null) localVarFormParams.put("workflowInputs_2", workflowInputs2);
    if (workflowInputs3 != null) localVarFormParams.put("workflowInputs_3", workflowInputs3);
    if (workflowInputs4 != null) localVarFormParams.put("workflowInputs_4", workflowInputs4);
    if (workflowInputs5 != null) localVarFormParams.put("workflowInputs_5", workflowInputs5);
    if (workflowOptions != null) localVarFormParams.put("workflowOptions", workflowOptions);
    if (workflowType != null) localVarFormParams.put("workflowType", workflowType);
    if (workflowRoot != null) localVarFormParams.put("workflowRoot", workflowRoot);
    if (workflowTypeVersion != null)
      localVarFormParams.put("workflowTypeVersion", workflowTypeVersion);
    if (labels != null) localVarFormParams.put("labels", labels);
    if (workflowDependencies != null)
      localVarFormParams.put("workflowDependencies", workflowDependencies);

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {"multipart/form-data"};
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient
          .getHttpClient()
          .networkInterceptors()
          .add(
              new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(
                    com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                  com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                  return originalResponse
                      .newBuilder()
                      .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                      .build();
                }
              });
    }

    String[] localVarAuthNames = new String[] {};
    return apiClient.buildCall(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarFormParams,
        localVarAuthNames,
        progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private com.squareup.okhttp.Call submitValidateBeforeCall(
      String version,
      String workflowSource,
      String workflowUrl,
      Boolean workflowOnHold,
      String workflowInputs,
      String workflowInputs2,
      String workflowInputs3,
      String workflowInputs4,
      String workflowInputs5,
      String workflowOptions,
      String workflowType,
      String workflowRoot,
      String workflowTypeVersion,
      String labels,
      String workflowDependencies,
      final ProgressResponseBody.ProgressListener progressListener,
      final ProgressRequestBody.ProgressRequestListener progressRequestListener)
      throws ApiException {

    // verify the required parameter 'version' is set
    if (version == null) {
      throw new ApiException("Missing the required parameter 'version' when calling submit(Async)");
    }

    com.squareup.okhttp.Call call =
        submitCall(
            version,
            workflowSource,
            workflowUrl,
            workflowOnHold,
            workflowInputs,
            workflowInputs2,
            workflowInputs3,
            workflowInputs4,
            workflowInputs5,
            workflowOptions,
            workflowType,
            workflowRoot,
            workflowTypeVersion,
            labels,
            workflowDependencies,
            progressListener,
            progressRequestListener);
    return call;
  }

  /**
   * Submit a workflow for execution Submits a workflow to Cromwell. Note that this endpoint can
   * accept an unlimited number of input files via workflowInputs_N but swagger needs them to be
   * explicitly defined so we have provided 5 as an example.
   *
   * @param version Cromwell API Version (required)
   * @param workflowSource The workflow source file to submit for execution. Either workflow source
   *     or workflow url is required. (optional)
   * @param workflowUrl URL which points to the workflow. Either workflow source or workflow url is
   *     required. (optional)
   * @param workflowOnHold Put workflow on hold upon submission. By default, it is taken as false.
   *     (optional)
   * @param workflowInputs JSON or YAML file containing the inputs as an object. For WDL workflows a
   *     skeleton file can be generated from WOMtool using the \&quot;inputs\&quot; subcommand. When
   *     multiple files are specified, in case of key conflicts between multiple input JSON files,
   *     higher values of x in workflowInputs_x override lower values. For example, an input
   *     specified in workflowInputs_3 will override an input with the same name in workflowInputs
   *     or workflowInputs_2. Similarly, an input key specified in workflowInputs_5 will override an
   *     identical input key in any other input file. (optional)
   * @param workflowInputs2 A second JSON or YAML file containing inputs. (optional)
   * @param workflowInputs3 A third JSON or YAML file containing inputs. (optional)
   * @param workflowInputs4 A fourth JSON or YAML file containing inputs. (optional)
   * @param workflowInputs5 A fifth JSON or YAML file containing inputs. (optional)
   * @param workflowOptions JSON file containing configuration options for the execution of this
   *     workflow. (optional)
   * @param workflowType The workflow language for the file you submitted. Cromwell currently
   *     supports WDL and CWL. (optional)
   * @param workflowRoot The root object to be run. Only necessary for CWL submissions containing
   *     multiple objects (in an array). (optional)
   * @param workflowTypeVersion The specification version for the workflow language being used. For
   *     WDL, Cromwell currently supports draft-2 and 1.0. For CWL, Cromwell currently supports
   *     v1.0. (optional)
   * @param labels JSON object of labels to apply to this workflow. (optional)
   * @param workflowDependencies ZIP file containing workflow source files that are used to resolve
   *     local imports. This zip bundle will be unpacked in a sandbox accessible to this workflow.
   *     (optional)
   * @return WorkflowIdAndStatus
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *     response body
   */
  public WorkflowIdAndStatus submit(
      String version,
      String workflowSource,
      String workflowUrl,
      Boolean workflowOnHold,
      String workflowInputs,
      String workflowInputs2,
      String workflowInputs3,
      String workflowInputs4,
      String workflowInputs5,
      String workflowOptions,
      String workflowType,
      String workflowRoot,
      String workflowTypeVersion,
      String labels,
      String workflowDependencies)
      throws ApiException {
    ApiResponse<WorkflowIdAndStatus> resp =
        submitWithHttpInfo(
            version,
            workflowSource,
            workflowUrl,
            workflowOnHold,
            workflowInputs,
            workflowInputs2,
            workflowInputs3,
            workflowInputs4,
            workflowInputs5,
            workflowOptions,
            workflowType,
            workflowRoot,
            workflowTypeVersion,
            labels,
            workflowDependencies);
    return resp.getData();
  }

  /**
   * Submit a workflow for execution Submits a workflow to Cromwell. Note that this endpoint can
   * accept an unlimited number of input files via workflowInputs_N but swagger needs them to be
   * explicitly defined so we have provided 5 as an example.
   *
   * @param version Cromwell API Version (required)
   * @param workflowSource The workflow source file to submit for execution. Either workflow source
   *     or workflow url is required. (optional)
   * @param workflowUrl URL which points to the workflow. Either workflow source or workflow url is
   *     required. (optional)
   * @param workflowOnHold Put workflow on hold upon submission. By default, it is taken as false.
   *     (optional)
   * @param workflowInputs JSON or YAML file containing the inputs as an object. For WDL workflows a
   *     skeleton file can be generated from WOMtool using the \&quot;inputs\&quot; subcommand. When
   *     multiple files are specified, in case of key conflicts between multiple input JSON files,
   *     higher values of x in workflowInputs_x override lower values. For example, an input
   *     specified in workflowInputs_3 will override an input with the same name in workflowInputs
   *     or workflowInputs_2. Similarly, an input key specified in workflowInputs_5 will override an
   *     identical input key in any other input file. (optional)
   * @param workflowInputs2 A second JSON or YAML file containing inputs. (optional)
   * @param workflowInputs3 A third JSON or YAML file containing inputs. (optional)
   * @param workflowInputs4 A fourth JSON or YAML file containing inputs. (optional)
   * @param workflowInputs5 A fifth JSON or YAML file containing inputs. (optional)
   * @param workflowOptions JSON file containing configuration options for the execution of this
   *     workflow. (optional)
   * @param workflowType The workflow language for the file you submitted. Cromwell currently
   *     supports WDL and CWL. (optional)
   * @param workflowRoot The root object to be run. Only necessary for CWL submissions containing
   *     multiple objects (in an array). (optional)
   * @param workflowTypeVersion The specification version for the workflow language being used. For
   *     WDL, Cromwell currently supports draft-2 and 1.0. For CWL, Cromwell currently supports
   *     v1.0. (optional)
   * @param labels JSON object of labels to apply to this workflow. (optional)
   * @param workflowDependencies ZIP file containing workflow source files that are used to resolve
   *     local imports. This zip bundle will be unpacked in a sandbox accessible to this workflow.
   *     (optional)
   * @return ApiResponse&lt;WorkflowIdAndStatus&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *     response body
   */
  public ApiResponse<WorkflowIdAndStatus> submitWithHttpInfo(
      String version,
      String workflowSource,
      String workflowUrl,
      Boolean workflowOnHold,
      String workflowInputs,
      String workflowInputs2,
      String workflowInputs3,
      String workflowInputs4,
      String workflowInputs5,
      String workflowOptions,
      String workflowType,
      String workflowRoot,
      String workflowTypeVersion,
      String labels,
      String workflowDependencies)
      throws ApiException {
    com.squareup.okhttp.Call call =
        submitValidateBeforeCall(
            version,
            workflowSource,
            workflowUrl,
            workflowOnHold,
            workflowInputs,
            workflowInputs2,
            workflowInputs3,
            workflowInputs4,
            workflowInputs5,
            workflowOptions,
            workflowType,
            workflowRoot,
            workflowTypeVersion,
            labels,
            workflowDependencies,
            null,
            null);
    Type localVarReturnType = new TypeToken<WorkflowIdAndStatus>() {}.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Submit a workflow for execution (asynchronously) Submits a workflow to Cromwell. Note that this
   * endpoint can accept an unlimited number of input files via workflowInputs_N but swagger needs
   * them to be explicitly defined so we have provided 5 as an example.
   *
   * @param version Cromwell API Version (required)
   * @param workflowSource The workflow source file to submit for execution. Either workflow source
   *     or workflow url is required. (optional)
   * @param workflowUrl URL which points to the workflow. Either workflow source or workflow url is
   *     required. (optional)
   * @param workflowOnHold Put workflow on hold upon submission. By default, it is taken as false.
   *     (optional)
   * @param workflowInputs JSON or YAML file containing the inputs as an object. For WDL workflows a
   *     skeleton file can be generated from WOMtool using the \&quot;inputs\&quot; subcommand. When
   *     multiple files are specified, in case of key conflicts between multiple input JSON files,
   *     higher values of x in workflowInputs_x override lower values. For example, an input
   *     specified in workflowInputs_3 will override an input with the same name in workflowInputs
   *     or workflowInputs_2. Similarly, an input key specified in workflowInputs_5 will override an
   *     identical input key in any other input file. (optional)
   * @param workflowInputs2 A second JSON or YAML file containing inputs. (optional)
   * @param workflowInputs3 A third JSON or YAML file containing inputs. (optional)
   * @param workflowInputs4 A fourth JSON or YAML file containing inputs. (optional)
   * @param workflowInputs5 A fifth JSON or YAML file containing inputs. (optional)
   * @param workflowOptions JSON file containing configuration options for the execution of this
   *     workflow. (optional)
   * @param workflowType The workflow language for the file you submitted. Cromwell currently
   *     supports WDL and CWL. (optional)
   * @param workflowRoot The root object to be run. Only necessary for CWL submissions containing
   *     multiple objects (in an array). (optional)
   * @param workflowTypeVersion The specification version for the workflow language being used. For
   *     WDL, Cromwell currently supports draft-2 and 1.0. For CWL, Cromwell currently supports
   *     v1.0. (optional)
   * @param labels JSON object of labels to apply to this workflow. (optional)
   * @param workflowDependencies ZIP file containing workflow source files that are used to resolve
   *     local imports. This zip bundle will be unpacked in a sandbox accessible to this workflow.
   *     (optional)
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call submitAsync(
      String version,
      String workflowSource,
      String workflowUrl,
      Boolean workflowOnHold,
      String workflowInputs,
      String workflowInputs2,
      String workflowInputs3,
      String workflowInputs4,
      String workflowInputs5,
      String workflowOptions,
      String workflowType,
      String workflowRoot,
      String workflowTypeVersion,
      String labels,
      String workflowDependencies,
      final ApiCallback<WorkflowIdAndStatus> callback)
      throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener =
          new ProgressResponseBody.ProgressListener() {
            @Override
            public void update(long bytesRead, long contentLength, boolean done) {
              callback.onDownloadProgress(bytesRead, contentLength, done);
            }
          };

      progressRequestListener =
          new ProgressRequestBody.ProgressRequestListener() {
            @Override
            public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
              callback.onUploadProgress(bytesWritten, contentLength, done);
            }
          };
    }

    com.squareup.okhttp.Call call =
        submitValidateBeforeCall(
            version,
            workflowSource,
            workflowUrl,
            workflowOnHold,
            workflowInputs,
            workflowInputs2,
            workflowInputs3,
            workflowInputs4,
            workflowInputs5,
            workflowOptions,
            workflowType,
            workflowRoot,
            workflowTypeVersion,
            labels,
            workflowDependencies,
            progressListener,
            progressRequestListener);
    Type localVarReturnType = new TypeToken<WorkflowIdAndStatus>() {}.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }
  /**
   * Build call for submitBatch
   *
   * @param version Cromwell API Version (required)
   * @param workflowInputs JSON file containing the inputs as an array of objects. Every element of
   *     the array will correspond to a single workflow. For WDL workflows a skeleton file can be
   *     generated from WOMtool using the \&quot;inputs\&quot; subcommand. When multiple files are
   *     specified, in case of key conflicts between multiple input JSON files, higher values of x
   *     in workflowInputs_x override lower values. For example, an input specified in
   *     workflowInputs_3 will override an input with the same name in workflowInputs or
   *     workflowInputs_2. Similarly, an input key specified in workflowInputs_5 will override an
   *     identical input key in any other input file. (required)
   * @param workflowSource The workflow source file to submit for execution. Either workflow source
   *     or workflow url is required. (optional)
   * @param workflowUrl URL which points to the workflow. Either workflow source or workflow url is
   *     required. (optional)
   * @param workflowOnHold Put workflow on hold upon submission. By default, it is taken as false.
   *     (optional)
   * @param workflowOptions JSON file containing configuration options for the execution of this
   *     workflow. (optional)
   * @param workflowType The workflow language for the file you submitted. Cromwell currently
   *     supports WDL and CWL. (optional)
   * @param workflowTypeVersion The specification version for the workflow language being used. For
   *     WDL, Cromwell currently supports draft-2 and 1.0. For CWL, Cromwell currently supports
   *     v1.0. (optional)
   * @param labels JSON object of labels to apply to this workflow. (optional)
   * @param workflowDependencies ZIP file containing workflow source files that are used to resolve
   *     local imports. This zip bundle will be unpacked in a sandbox accessible to these workflows.
   *     (optional)
   * @param progressListener Progress listener
   * @param progressRequestListener Progress request listener
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   */
  public com.squareup.okhttp.Call submitBatchCall(
      String version,
      File workflowInputs,
      File workflowSource,
      String workflowUrl,
      Boolean workflowOnHold,
      File workflowOptions,
      String workflowType,
      String workflowTypeVersion,
      File labels,
      File workflowDependencies,
      final ProgressResponseBody.ProgressListener progressListener,
      final ProgressRequestBody.ProgressRequestListener progressRequestListener)
      throws ApiException {
    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath =
        "/api/workflows/{version}/batch"
            .replaceAll("\\{" + "version" + "\\}", apiClient.escapeString(version.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();
    if (workflowSource != null) localVarFormParams.put("workflowSource", workflowSource);
    if (workflowUrl != null) localVarFormParams.put("workflowUrl", workflowUrl);
    if (workflowOnHold != null) localVarFormParams.put("workflowOnHold", workflowOnHold);
    if (workflowInputs != null) localVarFormParams.put("workflowInputs", workflowInputs);
    if (workflowOptions != null) localVarFormParams.put("workflowOptions", workflowOptions);
    if (workflowType != null) localVarFormParams.put("workflowType", workflowType);
    if (workflowTypeVersion != null)
      localVarFormParams.put("workflowTypeVersion", workflowTypeVersion);
    if (labels != null) localVarFormParams.put("labels", labels);
    if (workflowDependencies != null)
      localVarFormParams.put("workflowDependencies", workflowDependencies);

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {"multipart/form-data"};
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient
          .getHttpClient()
          .networkInterceptors()
          .add(
              new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(
                    com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                  com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                  return originalResponse
                      .newBuilder()
                      .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                      .build();
                }
              });
    }

    String[] localVarAuthNames = new String[] {};
    return apiClient.buildCall(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarFormParams,
        localVarAuthNames,
        progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private com.squareup.okhttp.Call submitBatchValidateBeforeCall(
      String version,
      File workflowInputs,
      File workflowSource,
      String workflowUrl,
      Boolean workflowOnHold,
      File workflowOptions,
      String workflowType,
      String workflowTypeVersion,
      File labels,
      File workflowDependencies,
      final ProgressResponseBody.ProgressListener progressListener,
      final ProgressRequestBody.ProgressRequestListener progressRequestListener)
      throws ApiException {

    // verify the required parameter 'version' is set
    if (version == null) {
      throw new ApiException(
          "Missing the required parameter 'version' when calling submitBatch(Async)");
    }

    // verify the required parameter 'workflowInputs' is set
    if (workflowInputs == null) {
      throw new ApiException(
          "Missing the required parameter 'workflowInputs' when calling submitBatch(Async)");
    }

    com.squareup.okhttp.Call call =
        submitBatchCall(
            version,
            workflowInputs,
            workflowSource,
            workflowUrl,
            workflowOnHold,
            workflowOptions,
            workflowType,
            workflowTypeVersion,
            labels,
            workflowDependencies,
            progressListener,
            progressRequestListener);
    return call;
  }

  /**
   * Submit a batch of workflows for execution In instances where you want to run the same workflow
   * multiple times with varying inputs you may submit a workflow batch. This endpoint is
   * fundamentally the same as the standard submission endpoint with the exception that the inputs
   * JSON will be an array of objects instead of a single object.
   *
   * @param version Cromwell API Version (required)
   * @param workflowInputs JSON file containing the inputs as an array of objects. Every element of
   *     the array will correspond to a single workflow. For WDL workflows a skeleton file can be
   *     generated from WOMtool using the \&quot;inputs\&quot; subcommand. When multiple files are
   *     specified, in case of key conflicts between multiple input JSON files, higher values of x
   *     in workflowInputs_x override lower values. For example, an input specified in
   *     workflowInputs_3 will override an input with the same name in workflowInputs or
   *     workflowInputs_2. Similarly, an input key specified in workflowInputs_5 will override an
   *     identical input key in any other input file. (required)
   * @param workflowSource The workflow source file to submit for execution. Either workflow source
   *     or workflow url is required. (optional)
   * @param workflowUrl URL which points to the workflow. Either workflow source or workflow url is
   *     required. (optional)
   * @param workflowOnHold Put workflow on hold upon submission. By default, it is taken as false.
   *     (optional)
   * @param workflowOptions JSON file containing configuration options for the execution of this
   *     workflow. (optional)
   * @param workflowType The workflow language for the file you submitted. Cromwell currently
   *     supports WDL and CWL. (optional)
   * @param workflowTypeVersion The specification version for the workflow language being used. For
   *     WDL, Cromwell currently supports draft-2 and 1.0. For CWL, Cromwell currently supports
   *     v1.0. (optional)
   * @param labels JSON object of labels to apply to this workflow. (optional)
   * @param workflowDependencies ZIP file containing workflow source files that are used to resolve
   *     local imports. This zip bundle will be unpacked in a sandbox accessible to these workflows.
   *     (optional)
   * @return List&lt;WorkflowIdAndStatus&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *     response body
   */
  public List<WorkflowIdAndStatus> submitBatch(
      String version,
      File workflowInputs,
      File workflowSource,
      String workflowUrl,
      Boolean workflowOnHold,
      File workflowOptions,
      String workflowType,
      String workflowTypeVersion,
      File labels,
      File workflowDependencies)
      throws ApiException {
    ApiResponse<List<WorkflowIdAndStatus>> resp =
        submitBatchWithHttpInfo(
            version,
            workflowInputs,
            workflowSource,
            workflowUrl,
            workflowOnHold,
            workflowOptions,
            workflowType,
            workflowTypeVersion,
            labels,
            workflowDependencies);
    return resp.getData();
  }

  /**
   * Submit a batch of workflows for execution In instances where you want to run the same workflow
   * multiple times with varying inputs you may submit a workflow batch. This endpoint is
   * fundamentally the same as the standard submission endpoint with the exception that the inputs
   * JSON will be an array of objects instead of a single object.
   *
   * @param version Cromwell API Version (required)
   * @param workflowInputs JSON file containing the inputs as an array of objects. Every element of
   *     the array will correspond to a single workflow. For WDL workflows a skeleton file can be
   *     generated from WOMtool using the \&quot;inputs\&quot; subcommand. When multiple files are
   *     specified, in case of key conflicts between multiple input JSON files, higher values of x
   *     in workflowInputs_x override lower values. For example, an input specified in
   *     workflowInputs_3 will override an input with the same name in workflowInputs or
   *     workflowInputs_2. Similarly, an input key specified in workflowInputs_5 will override an
   *     identical input key in any other input file. (required)
   * @param workflowSource The workflow source file to submit for execution. Either workflow source
   *     or workflow url is required. (optional)
   * @param workflowUrl URL which points to the workflow. Either workflow source or workflow url is
   *     required. (optional)
   * @param workflowOnHold Put workflow on hold upon submission. By default, it is taken as false.
   *     (optional)
   * @param workflowOptions JSON file containing configuration options for the execution of this
   *     workflow. (optional)
   * @param workflowType The workflow language for the file you submitted. Cromwell currently
   *     supports WDL and CWL. (optional)
   * @param workflowTypeVersion The specification version for the workflow language being used. For
   *     WDL, Cromwell currently supports draft-2 and 1.0. For CWL, Cromwell currently supports
   *     v1.0. (optional)
   * @param labels JSON object of labels to apply to this workflow. (optional)
   * @param workflowDependencies ZIP file containing workflow source files that are used to resolve
   *     local imports. This zip bundle will be unpacked in a sandbox accessible to these workflows.
   *     (optional)
   * @return ApiResponse&lt;List&lt;WorkflowIdAndStatus&gt;&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *     response body
   */
  public ApiResponse<List<WorkflowIdAndStatus>> submitBatchWithHttpInfo(
      String version,
      File workflowInputs,
      File workflowSource,
      String workflowUrl,
      Boolean workflowOnHold,
      File workflowOptions,
      String workflowType,
      String workflowTypeVersion,
      File labels,
      File workflowDependencies)
      throws ApiException {
    com.squareup.okhttp.Call call =
        submitBatchValidateBeforeCall(
            version,
            workflowInputs,
            workflowSource,
            workflowUrl,
            workflowOnHold,
            workflowOptions,
            workflowType,
            workflowTypeVersion,
            labels,
            workflowDependencies,
            null,
            null);
    Type localVarReturnType = new TypeToken<List<WorkflowIdAndStatus>>() {}.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Submit a batch of workflows for execution (asynchronously) In instances where you want to run
   * the same workflow multiple times with varying inputs you may submit a workflow batch. This
   * endpoint is fundamentally the same as the standard submission endpoint with the exception that
   * the inputs JSON will be an array of objects instead of a single object.
   *
   * @param version Cromwell API Version (required)
   * @param workflowInputs JSON file containing the inputs as an array of objects. Every element of
   *     the array will correspond to a single workflow. For WDL workflows a skeleton file can be
   *     generated from WOMtool using the \&quot;inputs\&quot; subcommand. When multiple files are
   *     specified, in case of key conflicts between multiple input JSON files, higher values of x
   *     in workflowInputs_x override lower values. For example, an input specified in
   *     workflowInputs_3 will override an input with the same name in workflowInputs or
   *     workflowInputs_2. Similarly, an input key specified in workflowInputs_5 will override an
   *     identical input key in any other input file. (required)
   * @param workflowSource The workflow source file to submit for execution. Either workflow source
   *     or workflow url is required. (optional)
   * @param workflowUrl URL which points to the workflow. Either workflow source or workflow url is
   *     required. (optional)
   * @param workflowOnHold Put workflow on hold upon submission. By default, it is taken as false.
   *     (optional)
   * @param workflowOptions JSON file containing configuration options for the execution of this
   *     workflow. (optional)
   * @param workflowType The workflow language for the file you submitted. Cromwell currently
   *     supports WDL and CWL. (optional)
   * @param workflowTypeVersion The specification version for the workflow language being used. For
   *     WDL, Cromwell currently supports draft-2 and 1.0. For CWL, Cromwell currently supports
   *     v1.0. (optional)
   * @param labels JSON object of labels to apply to this workflow. (optional)
   * @param workflowDependencies ZIP file containing workflow source files that are used to resolve
   *     local imports. This zip bundle will be unpacked in a sandbox accessible to these workflows.
   *     (optional)
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call submitBatchAsync(
      String version,
      File workflowInputs,
      File workflowSource,
      String workflowUrl,
      Boolean workflowOnHold,
      File workflowOptions,
      String workflowType,
      String workflowTypeVersion,
      File labels,
      File workflowDependencies,
      final ApiCallback<List<WorkflowIdAndStatus>> callback)
      throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener =
          new ProgressResponseBody.ProgressListener() {
            @Override
            public void update(long bytesRead, long contentLength, boolean done) {
              callback.onDownloadProgress(bytesRead, contentLength, done);
            }
          };

      progressRequestListener =
          new ProgressRequestBody.ProgressRequestListener() {
            @Override
            public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
              callback.onUploadProgress(bytesWritten, contentLength, done);
            }
          };
    }

    com.squareup.okhttp.Call call =
        submitBatchValidateBeforeCall(
            version,
            workflowInputs,
            workflowSource,
            workflowUrl,
            workflowOnHold,
            workflowOptions,
            workflowType,
            workflowTypeVersion,
            labels,
            workflowDependencies,
            progressListener,
            progressRequestListener);
    Type localVarReturnType = new TypeToken<List<WorkflowIdAndStatus>>() {}.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }
  /**
   * Build call for timing
   *
   * @param version Cromwell API Version (required)
   * @param id A workflow ID (required)
   * @param progressListener Progress listener
   * @param progressRequestListener Progress request listener
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   */
  public com.squareup.okhttp.Call timingCall(
      String version,
      String id,
      final ProgressResponseBody.ProgressListener progressListener,
      final ProgressRequestBody.ProgressRequestListener progressRequestListener)
      throws ApiException {
    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath =
        "/api/workflows/{version}/{id}/timing"
            .replaceAll("\\{" + "version" + "\\}", apiClient.escapeString(version.toString()))
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {};

    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient
          .getHttpClient()
          .networkInterceptors()
          .add(
              new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(
                    com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                  com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                  return originalResponse
                      .newBuilder()
                      .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                      .build();
                }
              });
    }

    String[] localVarAuthNames = new String[] {};
    return apiClient.buildCall(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarFormParams,
        localVarAuthNames,
        progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private com.squareup.okhttp.Call timingValidateBeforeCall(
      String version,
      String id,
      final ProgressResponseBody.ProgressListener progressListener,
      final ProgressRequestBody.ProgressRequestListener progressRequestListener)
      throws ApiException {

    // verify the required parameter 'version' is set
    if (version == null) {
      throw new ApiException("Missing the required parameter 'version' when calling timing(Async)");
    }

    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException("Missing the required parameter 'id' when calling timing(Async)");
    }

    com.squareup.okhttp.Call call =
        timingCall(version, id, progressListener, progressRequestListener);
    return call;
  }

  /**
   * Get a visual diagram of a running workflow Returns a javascript file which will render a Gantt
   * chart for the requested workflow. The bars in the chart represent start and end times for
   * individual task invocations. This javascript is intended to be embedded into another web page.
   *
   * @param version Cromwell API Version (required)
   * @param id A workflow ID (required)
   * @return WorkflowIdAndStatus
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *     response body
   */
  public WorkflowIdAndStatus timing(String version, String id) throws ApiException {
    ApiResponse<WorkflowIdAndStatus> resp = timingWithHttpInfo(version, id);
    return resp.getData();
  }

  /**
   * Get a visual diagram of a running workflow Returns a javascript file which will render a Gantt
   * chart for the requested workflow. The bars in the chart represent start and end times for
   * individual task invocations. This javascript is intended to be embedded into another web page.
   *
   * @param version Cromwell API Version (required)
   * @param id A workflow ID (required)
   * @return ApiResponse&lt;WorkflowIdAndStatus&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *     response body
   */
  public ApiResponse<WorkflowIdAndStatus> timingWithHttpInfo(String version, String id)
      throws ApiException {
    com.squareup.okhttp.Call call = timingValidateBeforeCall(version, id, null, null);
    Type localVarReturnType = new TypeToken<WorkflowIdAndStatus>() {}.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Get a visual diagram of a running workflow (asynchronously) Returns a javascript file which
   * will render a Gantt chart for the requested workflow. The bars in the chart represent start and
   * end times for individual task invocations. This javascript is intended to be embedded into
   * another web page.
   *
   * @param version Cromwell API Version (required)
   * @param id A workflow ID (required)
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call timingAsync(
      String version, String id, final ApiCallback<WorkflowIdAndStatus> callback)
      throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener =
          new ProgressResponseBody.ProgressListener() {
            @Override
            public void update(long bytesRead, long contentLength, boolean done) {
              callback.onDownloadProgress(bytesRead, contentLength, done);
            }
          };

      progressRequestListener =
          new ProgressRequestBody.ProgressRequestListener() {
            @Override
            public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
              callback.onUploadProgress(bytesWritten, contentLength, done);
            }
          };
    }

    com.squareup.okhttp.Call call =
        timingValidateBeforeCall(version, id, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<WorkflowIdAndStatus>() {}.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }
  /**
   * Build call for updateLabels
   *
   * @param version Cromwell API Version (required)
   * @param id Workflow ID (required)
   * @param labels Custom labels submitted as JSON. Example:
   *     {\&quot;key-1\&quot;:\&quot;value-1\&quot;,\&quot;key-2\&quot;:\&quot;value-2\&quot;}
   *     (required)
   * @param progressListener Progress listener
   * @param progressRequestListener Progress request listener
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   */
  public com.squareup.okhttp.Call updateLabelsCall(
      String version,
      String id,
      Object labels,
      final ProgressResponseBody.ProgressListener progressListener,
      final ProgressRequestBody.ProgressRequestListener progressRequestListener)
      throws ApiException {
    Object localVarPostBody = labels;

    // create path and map variables
    String localVarPath =
        "/api/workflows/{version}/{id}/labels"
            .replaceAll("\\{" + "version" + "\\}", apiClient.escapeString(version.toString()))
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {};

    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient
          .getHttpClient()
          .networkInterceptors()
          .add(
              new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(
                    com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                  com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                  return originalResponse
                      .newBuilder()
                      .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                      .build();
                }
              });
    }

    String[] localVarAuthNames = new String[] {};
    return apiClient.buildCall(
        localVarPath,
        "PATCH",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarFormParams,
        localVarAuthNames,
        progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private com.squareup.okhttp.Call updateLabelsValidateBeforeCall(
      String version,
      String id,
      Object labels,
      final ProgressResponseBody.ProgressListener progressListener,
      final ProgressRequestBody.ProgressRequestListener progressRequestListener)
      throws ApiException {

    // verify the required parameter 'version' is set
    if (version == null) {
      throw new ApiException(
          "Missing the required parameter 'version' when calling updateLabels(Async)");
    }

    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(
          "Missing the required parameter 'id' when calling updateLabels(Async)");
    }

    // verify the required parameter 'labels' is set
    if (labels == null) {
      throw new ApiException(
          "Missing the required parameter 'labels' when calling updateLabels(Async)");
    }

    com.squareup.okhttp.Call call =
        updateLabelsCall(version, id, labels, progressListener, progressRequestListener);
    return call;
  }

  /**
   * Update labels for a workflow Update multiple labels for an existing workflow. When supplying a
   * label with a key unique to the workflow submission, a new label key/value entry is appended to
   * that workflow&#39;s metadata. When supplying a label with a key that is already associated to
   * the workflow submission, the original label value is updated with the new value for that
   * workflow&#39;s metadata.
   *
   * @param version Cromwell API Version (required)
   * @param id Workflow ID (required)
   * @param labels Custom labels submitted as JSON. Example:
   *     {\&quot;key-1\&quot;:\&quot;value-1\&quot;,\&quot;key-2\&quot;:\&quot;value-2\&quot;}
   *     (required)
   * @return LabelsResponse
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *     response body
   */
  public LabelsResponse updateLabels(String version, String id, Object labels) throws ApiException {
    ApiResponse<LabelsResponse> resp = updateLabelsWithHttpInfo(version, id, labels);
    return resp.getData();
  }

  /**
   * Update labels for a workflow Update multiple labels for an existing workflow. When supplying a
   * label with a key unique to the workflow submission, a new label key/value entry is appended to
   * that workflow&#39;s metadata. When supplying a label with a key that is already associated to
   * the workflow submission, the original label value is updated with the new value for that
   * workflow&#39;s metadata.
   *
   * @param version Cromwell API Version (required)
   * @param id Workflow ID (required)
   * @param labels Custom labels submitted as JSON. Example:
   *     {\&quot;key-1\&quot;:\&quot;value-1\&quot;,\&quot;key-2\&quot;:\&quot;value-2\&quot;}
   *     (required)
   * @return ApiResponse&lt;LabelsResponse&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *     response body
   */
  public ApiResponse<LabelsResponse> updateLabelsWithHttpInfo(
      String version, String id, Object labels) throws ApiException {
    com.squareup.okhttp.Call call = updateLabelsValidateBeforeCall(version, id, labels, null, null);
    Type localVarReturnType = new TypeToken<LabelsResponse>() {}.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Update labels for a workflow (asynchronously) Update multiple labels for an existing workflow.
   * When supplying a label with a key unique to the workflow submission, a new label key/value
   * entry is appended to that workflow&#39;s metadata. When supplying a label with a key that is
   * already associated to the workflow submission, the original label value is updated with the new
   * value for that workflow&#39;s metadata.
   *
   * @param version Cromwell API Version (required)
   * @param id Workflow ID (required)
   * @param labels Custom labels submitted as JSON. Example:
   *     {\&quot;key-1\&quot;:\&quot;value-1\&quot;,\&quot;key-2\&quot;:\&quot;value-2\&quot;}
   *     (required)
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call updateLabelsAsync(
      String version, String id, Object labels, final ApiCallback<LabelsResponse> callback)
      throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener =
          new ProgressResponseBody.ProgressListener() {
            @Override
            public void update(long bytesRead, long contentLength, boolean done) {
              callback.onDownloadProgress(bytesRead, contentLength, done);
            }
          };

      progressRequestListener =
          new ProgressRequestBody.ProgressRequestListener() {
            @Override
            public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
              callback.onUploadProgress(bytesWritten, contentLength, done);
            }
          };
    }

    com.squareup.okhttp.Call call =
        updateLabelsValidateBeforeCall(
            version, id, labels, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<LabelsResponse>() {}.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }
}
