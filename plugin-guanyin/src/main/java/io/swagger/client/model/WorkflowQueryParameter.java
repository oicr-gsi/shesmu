/*
 * Cromwell Server REST API
 * Describes the REST API provided by a Cromwell server
 *
 * OpenAPI spec version: 30
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.Objects;
import org.threeten.bp.OffsetDateTime;

/** Workflow query parameters */
@ApiModel(description = "Workflow query parameters")
@javax.annotation.Generated(
    value = "io.swagger.codegen.languages.JavaClientCodegen",
    date = "2018-12-03T20:33:09.260Z")
public class WorkflowQueryParameter {
  @SerializedName("submission")
  private OffsetDateTime submission = null;

  @SerializedName("start")
  private OffsetDateTime start = null;

  @SerializedName("end")
  private OffsetDateTime end = null;

  /**
   * Returns only workflows with the specified status. If specified multiple times, returns
   * workflows in any of the specified statuses.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    SUBMITTED("Submitted"),

    RUNNING("Running"),

    ABORTING("Aborting"),

    FAILED("Failed"),

    SUCCEEDED("Succeeded"),

    ABORTED("Aborted");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String text) {
      for (StatusEnum b : StatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration)
          throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return StatusEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("status")
  private StatusEnum status = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("id")
  private String id = null;

  @SerializedName("excludeLabelAnd")
  private String excludeLabelAnd = null;

  @SerializedName("excludeLabelOr")
  private String excludeLabelOr = null;

  @SerializedName("includeSubworkflows")
  private String includeSubworkflows = null;

  public WorkflowQueryParameter submission(OffsetDateTime submission) {
    this.submission = submission;
    return this;
  }

  /**
   * Returns only workflows with an equal or later submission time. Can be specified at most once.
   * If both submission time and start date are specified, submission time should be before or equal
   * to start date.
   *
   * @return submission
   */
  @ApiModelProperty(
      value =
          "Returns only workflows with an equal or later submission time. Can be specified at most once. If both submission time and start date are specified, submission time should be before or equal to start date. ")
  public OffsetDateTime getSubmission() {
    return submission;
  }

  public void setSubmission(OffsetDateTime submission) {
    this.submission = submission;
  }

  public WorkflowQueryParameter start(OffsetDateTime start) {
    this.start = start;
    return this;
  }

  /**
   * Returns only workflows with an equal or later start datetime. Can be specified at most once. If
   * both start and end date are specified, start date must be before or equal to end date.
   *
   * @return start
   */
  @ApiModelProperty(
      value =
          "Returns only workflows with an equal or later start datetime.  Can be specified at most once. If both start and end date are specified, start date must be before or equal to end date. ")
  public OffsetDateTime getStart() {
    return start;
  }

  public void setStart(OffsetDateTime start) {
    this.start = start;
  }

  public WorkflowQueryParameter end(OffsetDateTime end) {
    this.end = end;
    return this;
  }

  /**
   * Returns only workflows with an equal or earlier end datetime. Can be specified at most once. If
   * both start and end date are specified, start date must be before or equal to end date.
   *
   * @return end
   */
  @ApiModelProperty(
      value =
          "Returns only workflows with an equal or earlier end datetime.  Can be specified at most once. If both start and end date are specified, start date must be before or equal to end date. ")
  public OffsetDateTime getEnd() {
    return end;
  }

  public void setEnd(OffsetDateTime end) {
    this.end = end;
  }

  public WorkflowQueryParameter status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * Returns only workflows with the specified status. If specified multiple times, returns
   * workflows in any of the specified statuses.
   *
   * @return status
   */
  @ApiModelProperty(
      value =
          "Returns only workflows with the specified status.  If specified multiple times, returns workflows in any of the specified statuses. ")
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }

  public WorkflowQueryParameter name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Returns only workflows with the specified name. If specified multiple times, returns workflows
   * with any of the specified names.
   *
   * @return name
   */
  @ApiModelProperty(
      value =
          "Returns only workflows with the specified name.  If specified multiple times, returns workflows with any of the specified names. ")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public WorkflowQueryParameter id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Returns only workflows with the specified workflow id. If specified multiple times, returns
   * workflows with any of the specified workflow ids.
   *
   * @return id
   */
  @ApiModelProperty(
      value =
          "Returns only workflows with the specified workflow id.  If specified multiple times, returns workflows with any of the specified workflow ids. ")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public WorkflowQueryParameter excludeLabelAnd(String excludeLabelAnd) {
    this.excludeLabelAnd = excludeLabelAnd;
    return this;
  }

  /**
   * Excludes workflows with the specified label. If specified multiple times, excludes workflows
   * with all of the specified label keys. Specify the label key and label value pair as separated
   * with \&quot;label-key:label-value\&quot;
   *
   * @return excludeLabelAnd
   */
  @ApiModelProperty(
      value =
          "Excludes workflows with the specified label.  If specified multiple times, excludes workflows with all of the specified label keys. Specify the label key and label value pair as separated with \"label-key:label-value\" ")
  public String getExcludeLabelAnd() {
    return excludeLabelAnd;
  }

  public void setExcludeLabelAnd(String excludeLabelAnd) {
    this.excludeLabelAnd = excludeLabelAnd;
  }

  public WorkflowQueryParameter excludeLabelOr(String excludeLabelOr) {
    this.excludeLabelOr = excludeLabelOr;
    return this;
  }

  /**
   * Excludes workflows with the specified label. If specified multiple times, excludes workflows
   * with any of the specified label keys. Specify the label key and label value pair as separated
   * with \&quot;label-key:label-value\&quot;
   *
   * @return excludeLabelOr
   */
  @ApiModelProperty(
      value =
          "Excludes workflows with the specified label.  If specified multiple times, excludes workflows with any of the specified label keys. Specify the label key and label value pair as separated with \"label-key:label-value\" ")
  public String getExcludeLabelOr() {
    return excludeLabelOr;
  }

  public void setExcludeLabelOr(String excludeLabelOr) {
    this.excludeLabelOr = excludeLabelOr;
  }

  public WorkflowQueryParameter includeSubworkflows(String includeSubworkflows) {
    this.includeSubworkflows = includeSubworkflows;
    return this;
  }

  /**
   * Include subworkflows in results. By default, it is taken as true.
   *
   * @return includeSubworkflows
   */
  @ApiModelProperty(value = "Include subworkflows in results. By default, it is taken as true.")
  public String getIncludeSubworkflows() {
    return includeSubworkflows;
  }

  public void setIncludeSubworkflows(String includeSubworkflows) {
    this.includeSubworkflows = includeSubworkflows;
  }

  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WorkflowQueryParameter workflowQueryParameter = (WorkflowQueryParameter) o;
    return Objects.equals(this.submission, workflowQueryParameter.submission)
        && Objects.equals(this.start, workflowQueryParameter.start)
        && Objects.equals(this.end, workflowQueryParameter.end)
        && Objects.equals(this.status, workflowQueryParameter.status)
        && Objects.equals(this.name, workflowQueryParameter.name)
        && Objects.equals(this.id, workflowQueryParameter.id)
        && Objects.equals(this.excludeLabelAnd, workflowQueryParameter.excludeLabelAnd)
        && Objects.equals(this.excludeLabelOr, workflowQueryParameter.excludeLabelOr)
        && Objects.equals(this.includeSubworkflows, workflowQueryParameter.includeSubworkflows);
  }

  @Override
  public int hashCode() {
    return Objects.hash(
        submission,
        start,
        end,
        status,
        name,
        id,
        excludeLabelAnd,
        excludeLabelOr,
        includeSubworkflows);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WorkflowQueryParameter {\n");

    sb.append("    submission: ").append(toIndentedString(submission)).append("\n");
    sb.append("    start: ").append(toIndentedString(start)).append("\n");
    sb.append("    end: ").append(toIndentedString(end)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    excludeLabelAnd: ").append(toIndentedString(excludeLabelAnd)).append("\n");
    sb.append("    excludeLabelOr: ").append(toIndentedString(excludeLabelOr)).append("\n");
    sb.append("    includeSubworkflows: ")
        .append(toIndentedString(includeSubworkflows))
        .append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
